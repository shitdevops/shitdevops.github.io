<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>shell</title>
      <link href="/posts/39204.html"/>
      <url>/posts/39204.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、Shell入门"><a href="#一、Shell入门" class="headerlink" title="一、Shell入门"></a>一、Shell入门</h1><p>通过source或”.”加载执行过的脚本，由于是在当前是shell中执行脚本，因此在脚本结束之后，脚本中的变量(包括函数)值再当前shell中依然存在，而sh和bash执行脚本都会启动新的子shell执行，执行完后退回到父shell。因此，变量(包括函数)值等无法保留。在进行shell脚本开发时，如果脚本中有引用或执行其它脚本的内容或配置文件的需求时，最好用”.”或source先加载该脚本或配置文件，处理完之后，再将它们加载到脚本的下面，就可以调用source加载的脚本即配置文件中的变量及函数等内容了。</p><p>常规变量的字符串定义变量值应加双引号，并且等号前后不能有空格，需要强引用的(指所见即所得的字符串引用)，则用单引号(‘ ‘)，如果是命令的引用，则用反引号(&#96;&#96;)。</p><p>查看设置的变量时，有三个命令可查看：set、env和declare。set输出所有的变量，包括全局变量和局部变量；env只显示全局变量；declare输出所有的变量、函数、整数和已经导出的变量</p><p>环境变量永久生效的常用设置文件</p><p>(1)用户的环境变量配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ls /root/.bashrc </span><br><span class="line">/root/.bashrc</span><br><span class="line">[root@localhost ~]# ls /root/.bash_profile </span><br><span class="line">/root/.bash_profile</span><br></pre></td></tr></table></figure><p>(2)全局环境变量的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/profile</span><br><span class="line">/etc/bashrc</span><br><span class="line">/etc/profile.d/</span><br></pre></td></tr></table></figure><h2 id="环境变量对应文件的生效顺序"><a href="#环境变量对应文件的生效顺序" class="headerlink" title="环境变量对应文件的生效顺序"></a>环境变量对应文件的生效顺序</h2><p>系统运行shell的方式一般有3种：</p><p>1)通过系统用户登录后默认运行的shell</p><p>2)非登录交互式运行shell</p><p>3)执行脚本运行非交互式shell</p><p>当用户登录linux系统时，shell会作为登录shell启动，此时的登录shell加载环境变量的顺序如图</p><p><img src="/shell.assets/image-20210327090734908.png" alt="image-20210327090734908"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">第一种(通过系统用户登录-login shell)</span><br><span class="line">1)当用户登录系统后，首先加载/etc/profile全局环境变量</span><br><span class="line">2)接着加载/etc/profile.d/目录下的脚本文件，自定义开机启动的脚本都可以放在这个目录下</span><br><span class="line">3)紧接着加载<span class="variable">$HOME</span>/.bash_profile(这是用户个人的环境变量文件)</span><br><span class="line">4)在<span class="variable">$HOME</span>/.bash_profile文件中，会加载<span class="variable">$HOME</span>/.bashrc(也是用户个人的环境变量文件，包含在<span class="variable">$HOME</span>/.bash_profile)中，如果有环境变量就加载，没有就不加载。</span><br><span class="line"></span><br><span class="line">第二种(用户的shell不是登录时启动的 non-login shell)</span><br><span class="line">比如说：手动在终端执行<span class="string">&quot;bash&quot;</span>命令，又或者不需要输入密码的登录以及远程SSH连接的情况</span><br><span class="line">这样的方式，只会加载<span class="variable">$HOME</span>/.bashrc(用户个人的环境变量文件)，紧接着去加载/etc/bashrc(全局环境变量文件)</span><br></pre></td></tr></table></figure><h3 id="login-shell和no-login-shell"><a href="#login-shell和no-login-shell" class="headerlink" title="login shell和no-login shell"></a>login shell和no-login shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">login shell代表用户登入，比如使用“su”命令，或者用SSH连接到某一个服务器上，都会使用该用户默认shell启动login shell模式</span><br><span class="line">该模式下的shell会去自动执行/etc/profile和~/.profile文件，但不会执行任何的bashrc文件</span><br><span class="line">而no-login shell的情况是我们在终端直接输入bash来启动的shell</span><br><span class="line">该模式下是不会自动去运行任何的profile文件</span><br></pre></td></tr></table></figure><h3 id="bashrc和profile的区别"><a href="#bashrc和profile的区别" class="headerlink" title="bashrc和profile的区别"></a>bashrc和profile的区别</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">profile</span><br><span class="line">profile是某个用户唯一的用来设置环境变量的地方，因为用户可以有多个shell比如bash，sh，zsh之类的，但像环境变量这种其实只需要在统一的一个地方初始化就可以了，而这就是profile</span><br><span class="line"></span><br><span class="line">bashrc</span><br><span class="line">bashrc是专门用来给bash做初始化的比如用来初始化bash的设置，bash的代码补全，bash的别名，bash的颜色。</span><br><span class="line"></span><br><span class="line">它们的差异在于：</span><br><span class="line">1.bashrc是系统启动后就会自动执行</span><br><span class="line">2.profile是在用户登录后才会运行</span><br><span class="line">3./etc/profle中设定的变量(全局)可以作用于任何用户，而~/.bashrc等中设定的变量(局部)只能继承/etc/profile中的变量，它们是父子关系。</span><br><span class="line"></span><br><span class="line">~/.bashrc</span><br><span class="line">/etc/bashrc</span><br><span class="line">/etc/profile三者区别：</span><br><span class="line"></span><br><span class="line">~/.bashrc 是用户相关的终端的环境设置，通常打开一个新终端时，默认会load里面的设置，在这里的设置不影响其它人。如果一个服务器多个开发者使用，大家都需要有自己的sdk安装和设置，那么最好就是设置它。</span><br><span class="line"></span><br><span class="line">/etc/bashrc 是系统全局针对终端环境的设置，修改了它，会影响所有用户的终端环境，这里一般配置终端如何与用户进行交互的增强功能等（比如sudo提示、命令找不到提示安装什么包等），新开的终端，已经load了这个配置，最后才load用户自己的 ~/.bashrc</span><br><span class="line"></span><br><span class="line">/etc/profile 是系统全局针对终端环境的设置，它是login时最先被系统加载的，是它调用了/etc/bashrc，以及/etc/profile.d目录下的*.sh文件，如果有一个软件包，系统上只安装一份，供所有开发者使用，建议在/etc/profile.d下创建一个新的xxx.sh，配置环境变量。</span><br><span class="line"></span><br><span class="line">图形化界面登录时：/etc/profile  ~/.profile</span><br><span class="line">图形化界面登录后(也就是打开终端): /etc/bashrc ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="普通变量"><a href="#普通变量" class="headerlink" title="普通变量"></a>普通变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# a=192.168.1.2-$a</span><br><span class="line">[root@localhost ~]# b=&#x27;192.168.1.2-$a&#x27;</span><br><span class="line">[root@localhost ~]# c=&quot;192.168.1.2-$a&quot;</span><br><span class="line">[root@localhost ~]# echo &quot;a=$a&quot; </span><br><span class="line">a=192.168.1.2-192.168.100.10</span><br><span class="line">[root@localhost ~]# echo &quot;b=$b&quot;</span><br><span class="line">b=192.168.1.2-$a</span><br><span class="line">[root@localhost ~]# echo &quot;c=$&#123;c&#125;&quot;</span><br><span class="line">c=192.168.1.2-192.168.1.2-192.168.100.10</span><br></pre></td></tr></table></figure><p>第一种定义a变量的方式是不加任何引号直接定义变量的内容，当内容为简单连续的数字、字符串、路径名时，可以这样使用</p><p>第二种定义b变量的方式是通过单引号定义，这种定义方式的特点是：输出变量内容时单引号里是什么就输出什么，即使内容中有变量和命令也会把他们原样输出。这种放肆比较适合于定义显示纯字符串的情况，既不希望解析变量、命令的场景。</p><p>第三章定义c变量的方式是通过双引号定义。这种定义方式的特点是：输出变量内容时引号里的变量及命令会经过解析后再输出内容，而不是把双引号中的变量名及命令原样输出，这种方式比较适合于字符串中附带有变量及命令且想将其解析后再输出的变量定义。</p><p><strong>把一个命令的结果作为变量的内容赋值的方法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量名=`ls` 不推荐这种</span><br><span class="line">变量名=$(ls)</span><br></pre></td></tr></table></figure><h2 id="vim添加注释"><a href="#vim添加注释" class="headerlink" title="vim添加注释"></a>vim添加注释</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">[root@shell scripts]<span class="comment"># cat /etc/vimrc </span></span><br><span class="line"><span class="built_in">set</span> nocompatible </span><br><span class="line"><span class="built_in">set</span> nu</span><br><span class="line"><span class="built_in">set</span> <span class="built_in">history</span>=100</span><br><span class="line">filetype on</span><br><span class="line">filetype plugin on</span><br><span class="line">filetype indent on </span><br><span class="line"><span class="built_in">set</span> autoread </span><br><span class="line"><span class="built_in">set</span> mouse=c</span><br><span class="line">syntax <span class="built_in">enable</span> </span><br><span class="line"><span class="built_in">set</span> cursorline</span><br><span class="line">hi cursorline guibg=<span class="comment">#00ff00</span></span><br><span class="line">hi CursorColumn guibg=<span class="comment">#00ff00</span></span><br><span class="line"><span class="built_in">set</span> foldenable</span><br><span class="line"><span class="built_in">set</span> foldmethod=manual</span><br><span class="line"><span class="built_in">set</span> foldcolumn=0</span><br><span class="line">setlocal foldlevel=3</span><br><span class="line"><span class="built_in">set</span> foldclose=all           </span><br><span class="line">nnoremap &lt;space&gt; @=((foldclosed(line(&#x27;.&#x27;)) &lt; 0) ? <span class="string">&#x27;zc&#x27;</span> : <span class="string">&#x27;zo&#x27;</span>)&lt;CR&gt;</span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"><span class="built_in">set</span> tabstop=4</span><br><span class="line"><span class="built_in">set</span> shiftwidth=4</span><br><span class="line"><span class="built_in">set</span> softtabstop=4</span><br><span class="line"><span class="built_in">set</span> smarttab</span><br><span class="line"><span class="built_in">set</span> ai  </span><br><span class="line"><span class="built_in">set</span> si </span><br><span class="line"><span class="built_in">set</span> wrap </span><br><span class="line"><span class="built_in">set</span> sw=4        </span><br><span class="line"><span class="built_in">set</span> wildmenu </span><br><span class="line"><span class="built_in">set</span> ruler </span><br><span class="line"><span class="built_in">set</span> cmdheight=1 </span><br><span class="line"><span class="built_in">set</span> lz </span><br><span class="line"><span class="built_in">set</span> backspace=eol,start,indent </span><br><span class="line"><span class="built_in">set</span> whichwrap+=&lt;,&gt;,h,l </span><br><span class="line"><span class="built_in">set</span> magic </span><br><span class="line"><span class="built_in">set</span> noerrorbells</span><br><span class="line"><span class="built_in">set</span> novisualbell</span><br><span class="line"><span class="built_in">set</span> showmatch </span><br><span class="line"><span class="built_in">set</span> mat=4 </span><br><span class="line"><span class="built_in">set</span> hlsearch</span><br><span class="line"><span class="built_in">set</span> ignorecase</span><br><span class="line"><span class="built_in">set</span> encoding=utf-8</span><br><span class="line"><span class="built_in">set</span> fileencodings=utf-8</span><br><span class="line"><span class="built_in">set</span> termencoding=utf-8</span><br><span class="line"><span class="built_in">set</span> smartindent</span><br><span class="line"><span class="built_in">set</span> cin</span><br><span class="line"><span class="built_in">set</span> showmatch</span><br><span class="line"><span class="built_in">set</span> guioptions-=T</span><br><span class="line"><span class="built_in">set</span> guioptions-=m</span><br><span class="line"><span class="built_in">set</span> vb t_vb=</span><br><span class="line"><span class="built_in">set</span> laststatus=4</span><br><span class="line"><span class="built_in">set</span> pastetoggle=&lt;F9&gt;</span><br><span class="line"><span class="built_in">set</span> background=dark</span><br><span class="line">highlight Search ctermbg=black  ctermfg=white guifg=white guibg=black</span><br><span class="line">autocmd BufNewFile *.py,*.cc,*.sh,*.java <span class="built_in">exec</span> <span class="string">&quot;:call SetTitle()&quot;</span></span><br><span class="line">func SetTitle()  </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">expand</span>(<span class="string">&quot;%:e&quot;</span>) == <span class="string">&#x27;sh&#x27;</span>  </span><br><span class="line">        call setline(1, <span class="string">&quot;#!/bin/bash&quot;</span>)</span><br><span class="line">        call setline(2, <span class="string">&quot;##############################################################&quot;</span>)  </span><br><span class="line">        call setline(3, <span class="string">&quot;# File Name: &quot;</span>.<span class="built_in">expand</span>(<span class="string">&quot;%&quot;</span>))</span><br><span class="line">        call setline(4, <span class="string">&quot;# Version: V1.0&quot;</span>)</span><br><span class="line">        call setline(5, <span class="string">&quot;# Author: lcx&quot;</span>)    <span class="comment">#名字随意</span></span><br><span class="line">        call setline(6, <span class="string">&quot;# Organization: www.oldboyedu.com&quot;</span>)</span><br><span class="line">        call setline(7, <span class="string">&quot;##############################################################&quot;</span>)</span><br><span class="line">    endif  </span><br><span class="line">endfunc </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/shell.assets/16952149-e0abf847aed3ffde.png" alt="img"></p><h2 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0获取当前执行的shell脚本的文件名</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">n获取当前执行的shell脚本的第n个参数值</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="comment">#获取当前执行的shell脚本后面接的参数的总个数</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">*获取当前shell所有传参的参数</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">@获取当前shell所有传参的参数</span></span><br></pre></td></tr></table></figure><p><strong>$1 $2…$8 ${10} ${11}…特殊变量实战</strong></p><p>例一：测试$n(n为1…15)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat p.sh </span><br><span class="line">echo $1  #打印脚本传递的第一个参数的值</span><br><span class="line">[root@localhost ~]# sh p.sh oldboy</span><br><span class="line">oldboy</span><br><span class="line">[root@localhost ~]# sh p.sh oldboy oldgirl</span><br><span class="line">oldboy</span><br><span class="line">[root@localhost ~]# sh p.sh &quot;oldboy oldgirl&quot;  #加引号括起来的内容传参，会作为一个字符串参数</span><br><span class="line">oldboy oldgirl</span><br></pre></td></tr></table></figure><p>例二：加入$1 和 $2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat p.sh </span><br><span class="line">echo $1 $2  #打印脚本传递的第一个参数的值</span><br><span class="line">[root@localhost ~]# sh p.sh longge bingbing</span><br><span class="line">longge bingbing</span><br><span class="line">[root@localhost ~]# sh p.sh &quot;longge binbing&quot; oldboy</span><br><span class="line">longge binbing oldboy</span><br></pre></td></tr></table></figure><p>例三：设置15个位置参数($1~$15)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# echo \$&#123;1..15&#125; &gt; n.sh</span><br><span class="line">[root@localhost ~]# cat n.sh </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">1 <span class="variable">$2</span> <span class="variable">$3</span> <span class="variable">$4</span> <span class="variable">$5</span> <span class="variable">$6</span> <span class="variable">$7</span> <span class="variable">$8</span> <span class="variable">$9</span> <span class="variable">$10</span> <span class="variable">$11</span> <span class="variable">$12</span> <span class="variable">$13</span> <span class="variable">$14</span> <span class="variable">$15</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">增加<span class="built_in">echo</span>命令</span></span><br><span class="line">[root@localhost ~]# cat n.sh </span><br><span class="line">echo $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15</span><br><span class="line">[root@localhost ~]# echo &#123;a..z&#125;</span><br><span class="line">a b c d e f g h i j k l m n o p q r s t u v w x y z</span><br><span class="line">[root@localhost ~]# sh n.sh &#123;a..z&#125;</span><br><span class="line">a b c d e f g h i a0 a1 a2 a3 a4 a5 #位置参数的数字大于9后，输出的内容就不对了</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">因为当位置参数数字大于9时，需要用大括号将数字括起来</span></span><br><span class="line">[root@localhost ~]# cat n.sh </span><br><span class="line">echo $1 $2 $3 $4 $5 $6 $7 $8 $9 $&#123;10&#125; $&#123;11&#125; $&#123;12&#125; $&#123;13&#125; $&#123;14&#125; $&#123;15&#125;</span><br><span class="line">[root@localhost ~]# sh n.sh &#123;a..z&#125;</span><br><span class="line">a b c d e f g h i j k l m n o</span><br></pre></td></tr></table></figure><h4 id="0实践"><a href="#0实践" class="headerlink" title="$0实践"></a>$0实践</h4><p>作用为取出执行脚本的名称(包括路径)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# cat n.sh </span><br><span class="line">echo $0</span><br><span class="line">[root@localhost scripts]# sh n.sh </span><br><span class="line">n.sh</span><br><span class="line">[root@localhost scripts]# sh /opt/server/scripts/n.sh </span><br><span class="line">/opt/server/scripts/n.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# dirname /opt/server/scripts/n.sh </span><br><span class="line">/opt/server/scripts  # dirname命令获取路径</span><br><span class="line">[root@localhost scripts]# basename /opt/server/scripts/n.sh </span><br><span class="line">n.sh  # basename命令获取脚本名</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# cat n.sh </span><br><span class="line">dirname $0</span><br><span class="line">basename $0</span><br><span class="line">[root@localhost scripts]# sh /opt/server/scripts/n.sh </span><br><span class="line">/opt/server/scripts</span><br><span class="line">n.sh</span><br></pre></td></tr></table></figure><h4 id="实践"><a href="#实践" class="headerlink" title="$#实践"></a>$#实践</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# echo \$&#123;1..9&#125; &gt; q.sh</span><br><span class="line">[root@localhost scripts]# cat q.sh </span><br><span class="line">echo $1 $2 $3 $4 $5 $6 $7 $8 $9</span><br><span class="line">echo $#</span><br><span class="line">[root@localhost scripts]# sh q.sh &#123;a..z&#125;</span><br><span class="line">a b c d e f g h i # 只接收了9个变量</span><br><span class="line">26 # 传入26个字符作为26个参数，所以这里为26，说明传入了26个参数</span><br></pre></td></tr></table></figure><p>范例：根据用户在命令行的传参个数判断用户的输入，不合要求的给与提示并退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# cat t1.sh </span><br><span class="line">[ $# -ne 2 ] &amp;&amp; &#123; #如果执行脚本传参的个数不等于2</span><br><span class="line">        echo &quot;muse tow args&quot; #则输出提示</span><br><span class="line">        exit 1 #由于不满足要求，因此退出脚本</span><br><span class="line">&#125;</span><br><span class="line">echo oldgirl # 若满足要求 打印oldgirl</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# cat t2.sh </span><br><span class="line">if [ $# -ne 2 ]</span><br><span class="line">        then</span><br><span class="line">                echo &quot;USAGE:/bin/bash $0 arg1 arg2&quot;</span><br><span class="line">                exit 1</span><br><span class="line">fi</span><br><span class="line">echo $1 $2 #若满足要求 打印$1和$2获取到的传参的字符串</span><br><span class="line">[root@localhost scripts]# sh t2.sh </span><br><span class="line">USAGE:/bin/bash t2.sh arg1 arg2</span><br><span class="line">[root@localhost scripts]# sh t2.sh oldboy oldgril</span><br><span class="line">oldboy oldgril</span><br></pre></td></tr></table></figure><h4 id="和-区别"><a href="#和-区别" class="headerlink" title="$*和$@区别"></a>$*和$@区别</h4><p>范例1：利用set设置位置参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过<span class="built_in">set</span>设置三个字符串参数 --表示清楚所有的参数 变量，重新设置后面的参数变量</span></span><br><span class="line">[root@localhost scripts]# set -- &quot;I am&quot; handsome oldboy</span><br><span class="line">[root@localhost scripts]# echo $#</span><br><span class="line">3 #共三个参数</span><br><span class="line">[root@localhost scripts]# echo $1</span><br><span class="line">I am</span><br><span class="line">[root@localhost scripts]# echo $2</span><br><span class="line">handsome</span><br><span class="line">[root@localhost scripts]# echo $3</span><br><span class="line">oldboy</span><br><span class="line">[root@localhost scripts]# </span><br></pre></td></tr></table></figure><p>测试$*和$@，此时不带双引号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# echo $*</span><br><span class="line">I am handsome oldboy</span><br><span class="line">[root@localhost scripts]# echo $@</span><br><span class="line">I am handsome oldboy</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# for i in $*;do echo $i;done</span><br><span class="line">I # $*不加引号，因此会输出所有参数，第一个参数&quot;I am&quot;也被拆开输出了</span><br><span class="line">am</span><br><span class="line">handsome</span><br><span class="line">oldboy</span><br><span class="line">[root@localhost scripts]# for i in $@;do echo $i;done </span><br><span class="line">I # $@不加引号，因此会输出所有参数，第一个参数&quot;I am&quot;也被拆开输出了</span><br><span class="line">am</span><br><span class="line">handsome</span><br><span class="line">oldboy</span><br></pre></td></tr></table></figure><p>测试$*和$@，此时带有双引号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# echo &quot;$*&quot;</span><br><span class="line">I am handsome oldboy</span><br><span class="line">[root@localhost scripts]# echo &quot;$@&quot;</span><br><span class="line">I am handsome oldboy</span><br><span class="line">[root@localhost scripts]# </span><br><span class="line">[root@localhost scripts]# for i in &quot;$*&quot;;do echo $i;done</span><br><span class="line">I am handsome oldboy # 双引号情况下&quot;$*&quot;,内容被当作一个参数输出了</span><br><span class="line">[root@localhost scripts]# for i in &quot;$@&quot;;do echo $i;done </span><br><span class="line">I am # 每个参数均已独立的内容输出</span><br><span class="line">handsome</span><br><span class="line">oldboy</span><br></pre></td></tr></table></figure><h2 id="变量的引用规范"><a href="#变量的引用规范" class="headerlink" title="变量的引用规范"></a>变量的引用规范</h2><p>在引用变量时，若变量前后都有字符，则需要使${APACHE_ERR}(加大括号的方式)引用变量，以防止产生歧义；当变量内容为字符串时，需要使用”${APACHE_ERR}”(外面加双引号的方式)引用变量；当变量为整数时，则最好直接使用$APACHE_ERR来引用变量</p><h2 id="进程中的特殊状态变量"><a href="#进程中的特殊状态变量" class="headerlink" title="进程中的特殊状态变量"></a>进程中的特殊状态变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">?获取执行上一个指令的执行状态返回值(0)为成功</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">$获取当前执行的shell脚本额进程号</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">?获取上一个在后台工作的进程的进程号</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_获取在此之前执行的命令或脚本的最后一个参数</span></span><br></pre></td></tr></table></figure><h2 id="bash-shell内置变量命令"><a href="#bash-shell内置变量命令" class="headerlink" title="bash shell内置变量命令"></a>bash shell内置变量命令</h2><p>常用的内部命令有：echo、eval、exec、export、read、shift</p><p><strong>(1)echo</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">echo 参数选项说明</span><br><span class="line">-n不换行输出内容</span><br><span class="line">-e解析转义字符</span><br><span class="line">转义字符：</span><br><span class="line">\n换行</span><br><span class="line">\r回车</span><br><span class="line">\t制表符</span><br><span class="line">\b退格</span><br><span class="line">\v纵向制表符</span><br></pre></td></tr></table></figure><p>echo示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# echo oldboy;echo oldgirl</span><br><span class="line">oldboy</span><br><span class="line">oldgirl</span><br><span class="line">[root@localhost scripts]# echo -n oldboy;echo oldgirl</span><br><span class="line">oldboyoldgirl</span><br><span class="line">[root@localhost scripts]# echo &quot;oldboy\toldgirl\noldboy\toldbirl&quot;</span><br><span class="line">oldboy\toldgirl\noldboy\toldbirl</span><br><span class="line">[root@localhost scripts]# echo -e &quot;oldboy\toldgirl\noldboy\toldbirl&quot;</span><br><span class="line">oldboy  oldgirl</span><br><span class="line">oldboy  oldbirl</span><br><span class="line">[root@localhost scripts]# printf &quot;oldboy\toldgirl\noldboy\toldbirl\n&quot;</span><br><span class="line">oldboy  oldgirl</span><br><span class="line">oldboy  oldbirl</span><br><span class="line">[root@localhost scripts]# echo -e &quot;1\b23&quot;</span><br><span class="line">23</span><br><span class="line">[root@localhost scripts]# printf &quot;1\b23\n&quot;</span><br><span class="line">23</span><br></pre></td></tr></table></figure><p><strong>(2)eval</strong></p><p>功能：当shell程序执行到eval语句时，shell读入参数args，并将他们组合成新的命令，然后执行</p><p>set和eval命令的使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# cat noeval.sh </span><br><span class="line">echo \$$# #表示传参的个数</span><br><span class="line">[root@localhost scripts]# sh noeval.sh arg1 rag2</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">2 <span class="comment">#传入两个参数 因此$#为2，于是echo \$$#就变成了echo $2</span></span></span><br><span class="line">[root@localhost scripts]# cat eval.sh </span><br><span class="line">eval &quot;echo \$$#&quot; # 加上eval命令 使得打印的特殊位置参数，重新解析输出</span><br><span class="line">[root@localhost scripts]# sh eval.sh arg1 arg2</span><br><span class="line">arg2</span><br></pre></td></tr></table></figure><p><strong>(3)exec</strong></p><p>功能：exec命令能够在不创建新的子进程的前提下，转去执行指定的命令，当指定的命令执行完毕后，该进程(也就是最初的shell)就终止了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[zxy@localhost root]$ exec date</span><br><span class="line">Sat Mar 27 10:39:39 CST 2021</span><br><span class="line">[root@localhost ~]#  用户被切换了</span><br></pre></td></tr></table></figure><p>当使用exec打开文件后，read命令每次都会将文件指针移动到文件的下一行读取，直到文件末尾</p><p>利用这个可以实现处理文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# seq 5 &gt; /tmp/tmp.log</span><br><span class="line">[root@localhost ~]# vim exec.sh</span><br><span class="line">exec &lt; /tmp/tmp.log # 读取log内容</span><br><span class="line">while read line</span><br><span class="line">do</span><br><span class="line">        echo $line </span><br><span class="line">done</span><br><span class="line">echo ok</span><br><span class="line">[root@localhost ~]# sh exec.sh </span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">ok</span><br></pre></td></tr></table></figure><p><strong>(4)shift</strong></p><p>功能：会按如下方式重新命令所有的位置参数变量，即$2成为$1、$3成为$2等</p><p>shift命令的主要作用是将位置参数$1、$2等进行左移，即如果位置参数是$3、$2、$1，那么执行一次shift后，$3就变成了$2,$2变成了$1,$1就消失了</p><p>使用实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# vim n.sh </span><br><span class="line">echo $1 $2</span><br><span class="line">if [ $# -eq 2 ];then</span><br><span class="line">        shift</span><br><span class="line">        echo $1</span><br><span class="line">fi</span><br><span class="line">[root@localhost scripts]# sh n.sh 1 2</span><br><span class="line">1 2</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="shell变量子串"><a href="#shell变量子串" class="headerlink" title="shell变量子串"></a>shell变量子串</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;parameter&#125;返回变量<span class="variable">$parameter</span>的内容</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;<span class="comment">#parameter&#125;返回变量$parameter内存的长度(按字符)</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;parameter:offset&#125;在变量<span class="variable">$&#123;parameter&#125;</span>中，从位置offset之后开始提取子串到结尾</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;parameter:offset:length&#125;在变量<span class="variable">$&#123;parameter&#125;</span>从位置offset之后开始提取长度为length的子串</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;parameter<span class="comment">#word&#125;从变量$&#123;parameter&#125;开头开始删除最短匹配的word子串</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;parameter<span class="comment">##word&#125;从变量$&#123;parameter&#125;开头开始删除最长匹配的word子串</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;parameter%word&#125;从变量<span class="variable">$&#123;parameter&#125;</span>结尾开始删除最短匹配的word子串</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;parameter%%word&#125;从变量<span class="variable">$&#123;parameter&#125;</span>结尾开始删除最长匹配的word子串</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;parameter/pattern/string&#125;使用string代替第一个匹配的pattern</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;parameter//pattern/string&#125;使用string代替所有匹配的pattern</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# OLDBOY=&quot;I am oldboy&quot;</span><br><span class="line">[root@localhost scripts]# echo $&#123;OLDBOY&#125;</span><br><span class="line">I am oldboy</span><br><span class="line">[root@localhost scripts]# echo $OLDBOY </span><br><span class="line">I am oldboy</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# echo $OLDBOY | wc -L</span><br><span class="line">11</span><br><span class="line">[root@localhost scripts]# expr length &quot;$OLDBOY&quot;</span><br><span class="line">11</span><br><span class="line">[root@localhost scripts]# echo $&#123;#OLDBOY&#125;</span><br><span class="line">11</span><br></pre></td></tr></table></figure><p>例一：截取OLDBOY变量的内容，从2个字符之后开始截取，默认截取后面字符的全部，第2个字符不包含在内，也可里面为删除前面的多个字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# echo $&#123;OLDBOY&#125;</span><br><span class="line">I am oldboy</span><br><span class="line">[root@localhost scripts]# echo $&#123;OLDBOY:2&#125;</span><br><span class="line">am oldboy # 相当于从I后面的空格开始计算 截取到了结尾</span><br></pre></td></tr></table></figure><p>例二：截取OLDBOY变量的内容，从2个字符之后开始截取，截取2个字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# echo $&#123;OLDBOY:2:2&#125;</span><br><span class="line">am</span><br></pre></td></tr></table></figure><p>例三：从变量$OLDBOY内容的开头开始删除最短匹配”a<em>C”及”a</em>c”的子串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# OLDBOY=abcABC123ABCabc</span><br><span class="line">[root@localhost scripts]# echo $OLDBOY</span><br><span class="line">abcABC123ABCabc</span><br><span class="line">[root@localhost scripts]# echo $&#123;OLDBOY#a*C&#125;</span><br><span class="line">123ABCabc #从开头开始删除了abcABC</span><br><span class="line">[root@localhost scripts]# echo $&#123;OLDBOY#a*c&#125;</span><br><span class="line">ABC123ABCabc #从开头开始删除了abc</span><br></pre></td></tr></table></figure><p>例四：从变量$OLDBOY开头开始删除最长匹配”a<em>C”及”a</em>c”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# echo $&#123;OLDBOY##a*c&#125;</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# echo $&#123;OLDBOY##a*C&#125;</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><p>例五：从变量$OLDBOY结尾 开始删除最短匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# echo $&#123;OLDBOY%a*C&#125;</span><br><span class="line">abcABC123ABCabc #原样输出，因为从结尾开始a*C没有匹配上任何子串</span><br><span class="line">[root@localhost scripts]# echo $&#123;OLDBOY%a*c&#125;</span><br><span class="line">abcABC123ABC</span><br></pre></td></tr></table></figure><p>例六：从变量$OLDBOY结尾 开始删除最长匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# echo $&#123;OLDBOY%%a*C&#125;</span><br><span class="line">abcABC123ABCabc</span><br><span class="line">[root@localhost scripts]# echo $&#123;OLDBOY%%a*c&#125;</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# </span><br></pre></td></tr></table></figure><p>例七：使用oldgirl字符串代替变量$OLDBOY匹配的oldboy字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# OLDBOY=&quot;I am oldboy,yes,oldboy&quot;</span><br><span class="line">[root@localhost scripts]# echo $OLDBOY</span><br><span class="line">I am oldboy,yes,oldboy</span><br><span class="line">[root@localhost scripts]# echo $&#123;OLDBOY/oldboy/oldgirl&#125;</span><br><span class="line">I am oldgirl,yes,oldboy</span><br><span class="line">[root@localhost scripts]# echo $&#123;OLDBOY//oldboy/oldgirl&#125;</span><br><span class="line">I am oldgirl,yes,oldgirl</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">一个<span class="string">&quot;/&quot;</span>表示替换匹配的第一个字符串</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">两个<span class="string">&quot;/&quot;</span>表示替换匹配的所有字符串</span></span><br></pre></td></tr></table></figure><p>案例：去掉下面所有文件的文件名中的”_finished”字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--. 1 root root  0 Mar 27 11:19 stu_102999_1_finished.jpg</span><br><span class="line">-rw-r--r--. 1 root root  0 Mar 27 11:17 stu_102999_2_finished.jpg</span><br><span class="line">-rw-r--r--. 1 root root  0 Mar 27 11:17 stu_102999_3_finished.jpg</span><br><span class="line">-rw-r--r--. 1 root root  0 Mar 27 11:18 stu_102999_4_finished.jpg</span><br><span class="line">-rw-r--r--. 1 root root  0 Mar 27 11:18 stu_102999_5_finished.jpg</span><br><span class="line">[root@localhost scripts]# for f in `ls *fin*.jpg`;do mv $f `echo $&#123;f//_finished&#125;`;done</span><br><span class="line">[root@localhost scripts]# ll *.jpg</span><br><span class="line">-rw-r--r--. 1 root root 0 Mar 27 11:19 stu_102999_1.jpg</span><br><span class="line">-rw-r--r--. 1 root root 0 Mar 27 11:17 stu_102999_2.jpg</span><br><span class="line">-rw-r--r--. 1 root root 0 Mar 27 11:17 stu_102999_3.jpg</span><br><span class="line">-rw-r--r--. 1 root root 0 Mar 27 11:18 stu_102999_4.jpg</span><br><span class="line">-rw-r--r--. 1 root root 0 Mar 27 11:18 stu_102999_5.jpg</span><br></pre></td></tr></table></figure><h2 id="shell特殊扩展变量"><a href="#shell特殊扩展变量" class="headerlink" title="shell特殊扩展变量"></a>shell特殊扩展变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;parameter:-word&#125;如果parameter的变量值为空或为赋值，则会返回word字符串并替换变量的值</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;parameter:=word&#125;如果parameter的变量值为空或未赋值，则设置这个变量值为word，并返回其值</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;parameter:?word&#125;如果parameter的变量值为空或未赋值，那么word字符串将被作为标准错误输出，否则输出变量的值</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;parameter:+word&#125;如果parameter变量值为空或未赋值，则什么都不做，否则word字符串将替代变量的值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例一：${parameter:-word}示例1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# echo $test</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# result=$&#123;test:-UNSET&#125; # 若test没值 则返回UNSET</span><br><span class="line">[root@localhost scripts]# echo $result</span><br><span class="line">UNSET</span><br><span class="line">[root@localhost scripts]# echo $&#123;test&#125; #此时打印还是为空</span><br></pre></td></tr></table></figure><p>例二：${parameter:-word}示例2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# test=oldboy</span><br><span class="line">[root@localhost scripts]# echo $test</span><br><span class="line">oldboy</span><br><span class="line">[root@localhost scripts]# result=$&#123;test:-UNSET&#125;</span><br><span class="line">[root@localhost scripts]# echo $result</span><br><span class="line">oldboy</span><br><span class="line">[root@localhost scripts]# result=$&#123;test-UNSET&#125;  #定义时忽略冒号</span><br><span class="line">[root@localhost scripts]# echo $result  没有变化      </span><br><span class="line">oldboy</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">结论：当<span class="built_in">test</span>变量有值时，就打印result变量，返回<span class="built_in">test</span>变量的内容</span></span><br></pre></td></tr></table></figure><p>例三：${parameter:&#x3D;word}示例1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# unset result</span><br><span class="line">[root@localhost scripts]# echo $result</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# unset test</span><br><span class="line">[root@localhost scripts]# echo $test</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# result=$&#123;test:=UNSET&#125;</span><br><span class="line">[root@localhost scripts]# echo $result</span><br><span class="line">UNSET</span><br><span class="line">[root@localhost scripts]# echo $test</span><br><span class="line">UNSET</span><br><span class="line">[root@localhost scripts]# result=$&#123;test=UNSET&#125; </span><br><span class="line">[root@localhost scripts]# echo $result        </span><br><span class="line">UNSET</span><br><span class="line">[root@localhost scripts]# echo $test          </span><br><span class="line">UNSET</span><br><span class="line">[root@localhost scripts]# </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当result值里的变量<span class="built_in">test</span>值没有定义时，会给result赋值<span class="string">&quot;:=&quot;</span>后面的内容，同时会把<span class="string">&quot;:=&quot;</span>后面的内容赋值给result里没有定义的变量<span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><p>例四：${parameter:?word}示例1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# echo $&#123;key:?not defind&#125;</span><br><span class="line">-bash: key: not defind # 事先定义好的输出</span><br><span class="line">[root@localhost scripts]# echo $&#123;key?not defind&#125; </span><br><span class="line">-bash: key: not defind</span><br><span class="line">[root@localhost scripts]# key=1</span><br><span class="line">[root@localhost scripts]# echo $&#123;key:?not defind&#125;</span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# echo $&#123;key?not defind&#125;</span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# unset key</span><br><span class="line">[root@localhost scripts]# echo $&#123;key:?not defind&#125;</span><br><span class="line">-bash: key: not defind</span><br></pre></td></tr></table></figure><p>例五：${parameter:+word}示例1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# oldboy=$&#123;oldgirl:+word&#125;</span><br><span class="line">[root@localhost scripts]# echo $oldboy</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# oldgirl=19</span><br><span class="line">[root@localhost scripts]# oldboy=$&#123;oldgirl:+word&#125; # 这里一定要重新定义oldboy</span><br><span class="line">[root@localhost scripts]# echo  $oldboy           </span><br><span class="line">word #因为oldgirl有值，所以打印oldboy变量输出为:+后面的的内容</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">此功能可用于测试变量(oldgir的位置)是否存在，如果oldboy为word则证明oldgirl变量有值</span></span><br></pre></td></tr></table></figure><p><strong>生产案例：删除7天前的过期数据备份</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果忘记了定义path变量，又不希望path值为空值，可以用/tmp替代path空值的返回值</span></span><br><span class="line">[root@localhost scripts]# cat del.sh </span><br><span class="line">find $&#123;path-/tmp&#125; -name &quot;*.tar.gz&quot; -type f -mtime +7|xargs rm -f</span><br><span class="line">[root@localhost scripts]# sh -x del.sh </span><br><span class="line">+ find /tmp -name &#x27;*.tar.gz&#x27; -type f -mtime +7</span><br><span class="line">+ xargs rm -f</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">㘝未做特殊变量定义</span></span><br><span class="line">find $&#123;path&#125; -name &quot;*.tar.gz&quot; -type f -mtime +7|xargs rm -f</span><br><span class="line">[root@localhost scripts]# sh -x del.sh </span><br><span class="line">+ xargs rm -f</span><br><span class="line">+ find -name &#x27;*.tar.gz&#x27; -type f -mtime +7 # 明显没有指定路径 因此将会导致 异常</span><br></pre></td></tr></table></figure><h2 id="expr命令"><a href="#expr命令" class="headerlink" title="expr命令"></a>expr命令</h2><p>即可以用于整数运算也可以用于相关字符串长度、匹配等的运算处理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# expr 2 + 2</span><br><span class="line">4</span><br><span class="line">[root@localhost scripts]# expr 2 * 2 要用\来转义</span><br><span class="line">expr: syntax error</span><br><span class="line">[root@localhost scripts]# expr 2 \* 2</span><br><span class="line">4</span><br><span class="line">[root@localhost scripts]# expr 2 / 2</span><br><span class="line">1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">运算符及用于计算的数字左右都至少有一个空格，否则会报错</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用乘号时，必须用反斜线转义</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# i=5</span><br><span class="line">[root@localhost scripts]# i=`expr $i + 6`</span><br><span class="line">[root@localhost scripts]# echo $i</span><br><span class="line">11</span><br></pre></td></tr></table></figure><p><strong>案例1：判断一个变量值或字符串是否为整数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# i=5</span><br><span class="line">[root@localhost scripts]# expr $i + 6 &amp;&gt; /dev/null </span><br><span class="line">[root@localhost scripts]# echo $?</span><br><span class="line">0 #返回0 证明i的值为整数</span><br><span class="line">[root@localhost scripts]# i=oldboy</span><br><span class="line">[root@localhost scripts]# expr $i + 6 &amp;&gt; /dev/null </span><br><span class="line">[root@localhost scripts]# echo $?</span><br><span class="line">2 # 返回非0 证明i的值不是整数</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>案例2：通过传参判断输出内容是否为整数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# vim expr.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">expr $1 + 1 &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">[ $? -eq 0 ] &amp;&amp; echo int || echo chars #条件表达式语句，返回值为0，则输出int，否则输出chars</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# sh expr.sh oldoy</span><br><span class="line">chars</span><br><span class="line">[root@localhost scripts]# sh expr.sh 110</span><br><span class="line">int</span><br></pre></td></tr></table></figure><p><strong>案例3：通过read读入持续等待输入例子</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">▽root@localhost scripts]# vim judge_int.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">        read -p &quot;Pls input:&quot; a</span><br><span class="line">        expr $a + 0 &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">        [ $? -eq 0 ] &amp;&amp; echo int || echo chars</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# sh judge_int.sh </span><br><span class="line">Pls input:oldgirl</span><br><span class="line">chars</span><br><span class="line">Pls input:120</span><br><span class="line">int</span><br><span class="line">Pls input:^C</span><br></pre></td></tr></table></figure><p><strong>案例4：判断文件扩展名是否符合要求</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">▽root@localhost scripts]# vim expr1.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">if expr &quot;$1&quot; : &quot;.*\.pub&quot; &amp;&gt;/dev/null</span><br><span class="line">        then</span><br><span class="line">                echo &quot;you are using $1&quot;</span><br><span class="line">        else</span><br><span class="line">                echo &quot;pls use *.pub file&quot;</span><br><span class="line">fi</span><br><span class="line">[root@localhost scripts]# sh expr1.sh id_dsa.pub</span><br><span class="line">you are using id_dsa.pub</span><br><span class="line">[root@localhost scripts]# sh expr1.sh id_dsa</span><br><span class="line">pls use *.pub file</span><br></pre></td></tr></table></figure><p><strong>案例5：计算字符串的长度</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# char=&quot;I am oldboy&quot;</span><br><span class="line">[root@localhost scripts]# expr length &quot;$char&quot;</span><br><span class="line">11</span><br><span class="line">[root@localhost scripts]# echo $&#123;#char&#125;</span><br><span class="line">11</span><br></pre></td></tr></table></figure><p><strong>案例6：打印下面语句中字符数不大于6的单词</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">▽root@localhost scripts]# vim word_length.sh</span><br><span class="line">for n in I am oldboy linux welcome to our training</span><br><span class="line">do</span><br><span class="line">        if [ `expr length $n` -le 6 ] # 利用expr的length函数计算字符串长度，并输出长度不大于6的字符串</span><br><span class="line">                then</span><br><span class="line">                        echo $n</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line">[root@localhost scripts]# sh word_length.sh </span><br><span class="line">I</span><br><span class="line">am</span><br><span class="line">oldboy</span><br><span class="line">linux</span><br><span class="line">to</span><br><span class="line">our</span><br></pre></td></tr></table></figure><h2 id="read命令"><a href="#read命令" class="headerlink" title="read命令"></a>read命令</h2><p>-p:设置提示信息</p><p>-t:设置输入等待的时间，默认为秒</p><p><strong>案例1：实现read的基本读入功能</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# read -t 10 -p &quot;Pls input one num:&quot; num</span><br><span class="line">Pls input one num:18</span><br><span class="line">[root@localhost scripts]# echo $num</span><br><span class="line">18</span><br><span class="line">[root@localhost scripts]# read -p &quot;please input two number:&quot; a1 a2</span><br><span class="line">please input two number:1 2</span><br><span class="line">[root@localhost scripts]# echo $a1</span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# echo $a2</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="shell脚本的条件测试"><a href="#shell脚本的条件测试" class="headerlink" title="shell脚本的条件测试"></a>shell脚本的条件测试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test&lt;测试表达式&gt;test命令和&lt;测试表达式&gt;之间至少有一个空格</span><br><span class="line">[&lt;测试表达式&gt;][]的边界和内容之间至少有一个空格</span><br><span class="line">[[&lt;条件表达式&gt;]][[]]的边界和内容之间至少有一个空格</span><br><span class="line">((&lt;条件表达式&gt;))用于if语句，(())两端不需要有空格</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">语法1中的<span class="built_in">test</span>命令和语法2中的[]是等价的。语法3中的[[]]为扩展的<span class="built_in">test</span>命令</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">语法4的(())常用于计算  推荐使用语法2</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在[[]]中可以使用通配符等进行模式匹配，这是其区别于其他几种语法格式的地方</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&amp;&amp;、||、&gt;、&lt;等操作符可以应用于[[]]中，但不能应用于[]中，在[]中一般用-a、-o、-gt、-lt代替上述操作符</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a>符号说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">(())数值比较，运算</span><br><span class="line">[[]]条件测试，支持正则</span><br><span class="line">$(())整数运算</span><br><span class="line"></span><br><span class="line">$[]整数运算</span><br><span class="line">$()命令替换 shell会先执行括号的cmd，然后将结果作为变量进行替换，替换只能替换标准输出，错误输出不能替换</span><br><span class="line"><span class="variable">$&#123;&#125;</span>shell中变量的原形，用于限定变量名称的范围，并且支持通配符</span><br><span class="line"></span><br><span class="line">[]条件测试</span><br><span class="line">()子shell中执行</span><br><span class="line">&#123;&#125;在当前shell执行</span><br><span class="line"></span><br><span class="line"><span class="comment">#()是重新开一个子shell然后执行，而&#123;&#125;则是在当前shell执行</span></span><br><span class="line"><span class="comment">#()最后一个命令可以不用分号，&#123;&#125;最后一个命令要用分号</span></span><br><span class="line"><span class="comment">#()里第一个命令和左边括号不必有空格，而&#123;&#125;第一个命令和左括号之间必须有一个空格</span></span><br><span class="line"><span class="comment">#()和&#123;&#125;里的某个命令的重定向只影响该命令，而括号外的重定向则影响到括号里的所有命令</span></span><br><span class="line"></span><br><span class="line">[root@node3 ~]<span class="comment"># var=test</span></span><br><span class="line">[root@node3 ~]<span class="comment"># echo var</span></span><br><span class="line">var</span><br><span class="line">[root@node3 ~]<span class="comment"># echo $var</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">[root@node3 ~]<span class="comment"># (var=notest;echo $var)</span></span><br><span class="line">notest</span><br><span class="line">[root@node3 ~]<span class="comment"># &#123;var=notest;echo $var&#125;   </span></span><br><span class="line">-bash: &#123;var=notest: <span class="built_in">command</span> not found</span><br><span class="line"><span class="built_in">test</span>&#125;</span><br><span class="line">[root@node3 ~]<span class="comment"># &#123; var=notest;echo $var; &#125;</span></span><br><span class="line">notest</span><br><span class="line">[root@node3 ~]<span class="comment"># echo $var</span></span><br><span class="line">notest</span><br><span class="line"><span class="comment">#&#123;&#125;修改了变量的值。表明在当前shell中运行的</span></span><br><span class="line">[root@node3 ~]<span class="comment"># var=test</span></span><br><span class="line">[root@node3 ~]<span class="comment"># echo $var</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">[root@node3 ~]<span class="comment"># (var=notest;echo $var)</span></span><br><span class="line">notest</span><br><span class="line">[root@node3 ~]<span class="comment"># echo $var</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line"><span class="comment">#()里的执行完毕后没有改变变量的值，说明在子shell中执行的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#$(())和$[]的用途一致，用来作整数运算。在bash中，$(())的整数运算符号大致有这些：</span></span><br><span class="line"><span class="comment"># + - * / %</span></span><br><span class="line"><span class="comment"># &amp; | ^ ! AND OR XOR NOT</span></span><br><span class="line"></span><br><span class="line">[root@node3 ~]<span class="comment"># a=5;b=7;c=2</span></span><br><span class="line">[root@node3 ~]<span class="comment"># echo $((a+b*c))</span></span><br><span class="line">19</span><br><span class="line">[root@node3 ~]<span class="comment"># echo $[a+b*c]</span></span><br><span class="line">19</span><br><span class="line"></span><br><span class="line"><span class="comment">#&amp;&amp; || &lt; &gt; 等操作符可用于双中括号[[]]中，但不能应用于[]中，在[]中一般用-a -o -lt -gt来代替</span></span><br></pre></td></tr></table></figure><p><strong>范例1：test使用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# test -f file &amp;&amp; echo true || echo false</span><br><span class="line">false #如果file文件存在并且是普通文件就为真，因为file文件不存在，所以输出了false</span><br><span class="line">[root@localhost scripts]# touch file</span><br><span class="line">[root@localhost scripts]# test -f file &amp;&amp; echo true || echo false</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p><strong>范例2：在test命令中使用-z选项(如果测试字符串长度为0，则表达式成立)测试字符串</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# test -z &quot;oldboy&quot; &amp;&amp; echo 1 || echo 0</span><br><span class="line">0 #如果测试字符串的长度为0，则表达式成立，因为被测试的字符串为oldboy，不为0，表达式结果为假，因此返回0</span><br><span class="line">[root@localhost scripts]# char=&quot;oldboy&quot;</span><br><span class="line">[root@localhost scripts]# test -z &quot;$char&quot; &amp;&amp; echo 1 || echo 0</span><br><span class="line">0</span><br><span class="line">[root@localhost scripts]# char=&quot;&quot;</span><br><span class="line">[root@localhost scripts]# test -z &quot;$char&quot; &amp;&amp; echo 1 || echo 0</span><br><span class="line">1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ -f /tmp/oldboy.txt ] &amp;&amp; echo 1 || echo 0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果/tmp/oldboy.txt文件存在，则输出1，否则输出0</span></span><br></pre></td></tr></table></figure><p><img src="/shell.assets/image-20210327150457622.png" alt="image-20210327150457622"></p><p><strong>范例3：利用[]加-f选项(文件存在且为普通文件则表达式成立)测试文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# [ -f /tmp/oldboy.txt ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">0</span><br><span class="line">[root@localhost scripts]# touch /tmp/oldboy.txt</span><br><span class="line">[root@localhost scripts]# [ -f /tmp/oldboy.txt ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# [ -f /tmp/oldboy.txt ] &amp;&amp; echo 1</span><br><span class="line">1 #可以只写前一半，如果文件存在测输出1</span><br><span class="line">[root@localhost scripts]# [ -f /tmp/oldboy.txt ] || echo 0  # 因为文件已存在，所以没有输出</span><br><span class="line">[root@localhost scripts]# [ -f /tmp/oldgirl.txt ] || echo 0       </span><br><span class="line">0 #可以只写后一半，如果文件不存在则输出0</span><br></pre></td></tr></table></figure><h3 id="文件测试表达式"><a href="#文件测试表达式" class="headerlink" title="文件测试表达式"></a>文件测试表达式</h3><table><thead><tr><th align="left">-d文件 directory</th><th align="left">文件存在且为目录则为真</th></tr></thead><tbody><tr><td align="left">-f文件 file</td><td align="left">文件存在且为普通文件则为真</td></tr><tr><td align="left">-e文件 exist</td><td align="left">文件存在则为真，-e不辨别是目录还是文件</td></tr><tr><td align="left">-r文件 read</td><td align="left">文件存在且可读则为真</td></tr><tr><td align="left">-s文件 size</td><td align="left">文件存在且文件大小不为0则为真</td></tr><tr><td align="left">-w文件 write</td><td align="left">文件存在且可写则为真</td></tr><tr><td align="left">-L文件 link</td><td align="left">文件存在且为链接文件则为真</td></tr><tr><td align="left">f1 -nt f2 newer than</td><td align="left">文件f1比文件f2新则为真，根据文件的修改时间来计算</td></tr><tr><td align="left">f1 -ot f2 older than</td><td align="left">文件f1比文件f2旧则为真，根据文件的修改时间来计算</td></tr><tr><td align="left">-x文件 executable</td><td align="left">文件存在且可执行则为真</td></tr></tbody></table><p><strong>范例1：文件测试表达式示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">普通文件</span></span><br><span class="line">[root@localhost scripts]# touch oldboy</span><br><span class="line">[root@localhost scripts]# ls -l oldboy </span><br><span class="line">-rw-r--r--. 1 root root 0 Mar 27 15:14 oldboy</span><br><span class="line">[root@localhost scripts]# [ -f oldboy ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">目录文件</span></span><br><span class="line">[root@localhost scripts]# [ -f oldgirl ] &amp;&amp; echo 1  || echo 0</span><br><span class="line">0</span><br><span class="line">[root@localhost scripts]# [ -e oldgirl ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# [ -d oldgirl ] &amp;&amp; echo 1 || echo 0 </span><br><span class="line">1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>范例2：文件属性表示式示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# ls -l oldboy </span><br><span class="line">-rw-r--r--. 1 root root 0 Mar 27 15:14 oldboy</span><br><span class="line">[root@localhost scripts]# [ -r oldboy ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# [ -w oldboy ] &amp;&amp; echo 1 || echo 0 </span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# [ -x oldboy ] &amp;&amp; echo 1 || echo 0 </span><br><span class="line">0</span><br><span class="line">[root@localhost scripts]# chmod 001 oldboy </span><br><span class="line">[root@localhost scripts]# ls -l oldboy </span><br><span class="line">---------x. 1 root root 0 Mar 27 15:14 oldboy</span><br><span class="line">[root@localhost scripts]# [ -w oldboy ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">1 #因为当前用户是root 所以这是特殊的地方 即使没有读写权限 root用户也可以执行读写操作</span><br></pre></td></tr></table></figure><p><strong>范例3：测试shell变量示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">首先定义file1和file2两个变量，分别赋予这两个变量对应的系统文件路径及文件名的值</span></span><br><span class="line">[root@localhost scripts]# file1=/etc/services;file2=/etc/rc.local </span><br><span class="line">[root@localhost scripts]# echo $file1 $file2</span><br><span class="line">/etc/services /etc/rc.local</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">对单个文件变量进行测试</span></span><br><span class="line">[root@localhost scripts]# [ -f &quot;$file1&quot; ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# [ -d &quot;$file1&quot; ] &amp;&amp; echo 1 || echo 0 </span><br><span class="line">0</span><br><span class="line">[root@localhost scripts]# [ -s &quot;$file1&quot; ] &amp;&amp; echo 1 || echo 0 </span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# [ -e &quot;$file1&quot; ] &amp;&amp; echo 1 || echo 0 </span><br><span class="line">1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">对单个目录或文件进行测试</span></span><br><span class="line">[root@localhost scripts]# [ -e /etc ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# [ -w /etc/services ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# su - zxy 切换到普通用户</span><br><span class="line">Last login: Sat Mar 27 10:39:35 CST 2021 on pts/0</span><br><span class="line">[zxy@localhost ~]$ [ -w /etc/services ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p><strong>范例4：测试时变量的特殊写法</strong></p><p>用[]测试变量时，如果被测试的变量不加双引号，那么测试结果可能会是不正确的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# echo $oldgirl #这是一个不存在变量</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# [ -f $oldgirl ] &amp;&amp; echo 1 || echo 0 不加引号测试</span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# [ -f &quot;$oldgirl&quot; ] &amp;&amp; echo 1 || echo 0 加引号测试</span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果是文件实体路径，那么加引号与不加引号的结果是一样的</span></span><br><span class="line">[root@localhost scripts]# [ -f /etc/services ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# [ -f &quot;/etc/services&quot; ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>范例5：简单高效的测试文件</strong></p><p>在做测试判断时，不一定非要按照“前面的操作成功了如何，否则如何”的方法来进行，直接做部分判断</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# [ -x oldboy ] &amp;&amp; echo 1</span><br><span class="line">1 #如果oldboy可执行 则输出1 如果不可执行 则不做任何输出</span><br><span class="line">[root@localhost scripts]# [ -f /etc ] || echo 0</span><br><span class="line">0 # 如果/etc是文件这一点不成立 则输出0，如果成立 则不做任何输出</span><br></pre></td></tr></table></figure><h3 id="字符串测试表达式"><a href="#字符串测试表达式" class="headerlink" title="字符串测试表达式"></a>字符串测试表达式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-n&quot;字符串&quot;若字符串的长度不为0，则为真，即测试表达式成立 no zero</span><br><span class="line">-z&quot;字符串&quot;若字符串的长度为0，则为真 zero</span><br><span class="line">&quot;串1&quot;=&quot;串2&quot; 若字符串1等于字符串2，则为真；可使用&quot;==&quot;代替&quot;=&quot;</span><br><span class="line">&quot;串1&quot;!=&quot;串2&quot; 若字符串窜1不等于字符串2，则为真；</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">对于字符串的测试，一点要将字符串加双引号之后再进行比较。如[-n<span class="string">&quot;<span class="variable">$myvar</span>&quot;</span>]</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">比较符号(=和!=)的两端一定要有空格</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">&quot;!=&quot;</span>和<span class="string">&quot;=&quot;</span>可用于比较两个字符串是否相同</span></span><br></pre></td></tr></table></figure><p><strong>范例1：字符串条件表达式测试</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# [ -n &quot;abc&quot; ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# test -n &quot;abc&quot; &amp;&amp; echo 1 || echo 0 </span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# test -n &quot;&quot; &amp;&amp; echo 1 || echo 0</span><br><span class="line">0</span><br><span class="line">[root@localhost scripts]# var=&quot;oldboy&quot;</span><br><span class="line">[root@localhost scripts]# [ -n &quot;$var&quot; ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# [ -z &quot;$var&quot; ] &amp;&amp; echo 1 || echo 0 </span><br><span class="line">0</span><br><span class="line">[root@localhost scripts]# [ &quot;abc&quot; = &quot;abc&quot; ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">1 # &quot;=&quot;两端要有空格</span><br><span class="line">[root@localhost scripts]# [ &quot;abc&quot; = &quot;abd&quot; ] &amp;&amp; echo 1 || echo 0   </span><br><span class="line">0</span><br><span class="line">[root@localhost scripts]# [ &quot;$var&quot; = &quot;oldboy&quot; ] &amp;&amp; echo 1 || echo 0 </span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# [ &quot;$var&quot; != &quot;oldboy&quot; ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="整数二元比较操作符"><a href="#整数二元比较操作符" class="headerlink" title="整数二元比较操作符"></a>整数二元比较操作符</h3><table><thead><tr><th>在[]以及test中</th><th>在(())和[[]]中</th><th>说明</th></tr></thead><tbody><tr><td>-eq</td><td>&#x3D;&#x3D;或&#x3D;</td><td>相等</td></tr><tr><td>-ne</td><td>!&#x3D;</td><td>不相等</td></tr><tr><td>-gt</td><td>&gt;</td><td>大于</td></tr><tr><td>-ge</td><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>-lt</td><td>&lt;</td><td>小于</td></tr><tr><td>-le</td><td>&lt;&#x3D;</td><td>小于等于</td></tr></tbody></table><p><strong>范例1：二元数字在[]中使用&lt;、&gt;非标准符号的比较</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# [ 2 &gt; 1 ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# [ 2 \&lt; 1 ] &amp;&amp; echo 1 || echo 0  </span><br><span class="line">0</span><br><span class="line">[root@localhost scripts]# [ 2 = 1 ] &amp;&amp; echo 1 || echo 0  </span><br><span class="line">0</span><br><span class="line">[root@localhost scripts]# [ 2 = 2 ] &amp;&amp; echo 1 || echo 0 </span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# [ 2 != 2 ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p><strong>范例2：在[]中使用-gt、-le</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# [ 2 -gt 1 ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">1 # 2大于1成立</span><br><span class="line">[root@localhost scripts]# [ 2 -ge 1 ] &amp;&amp; echo 1 || echo 0 </span><br><span class="line">1 # 2大于等于1</span><br><span class="line">[root@localhost scripts]# [ 2 -le 1 ] &amp;&amp; echo 1 || echo 0 </span><br><span class="line">0 # 2小于等于1</span><br><span class="line">[root@localhost scripts]# [ 2 -lt 1 ] &amp;&amp; echo 1 || echo 0 </span><br><span class="line">0 # 2小于1</span><br></pre></td></tr></table></figure><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><table><thead><tr><th>[ ]和test</th><th>[[ ]]和(( ))</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>&amp;&amp;</td><td>and,与</td></tr><tr><td>-o</td><td>||</td><td>or</td></tr><tr><td>!</td><td>!</td><td>not</td></tr></tbody></table><p><strong>范例1：输入或通过命令行传入一个字符或数字，如果传入的数字等于1，就打印1；如果等于2，就打印2；如果不等于1也不等于2，就提示输入不对，然后退出程序</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.使用<span class="built_in">read</span>读入内容</span></span><br><span class="line">▽root@localhost scripts]# vim read.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo -n &quot;pls input a char:&quot;</span><br><span class="line">read var</span><br><span class="line">[ &quot;$var&quot; == &quot;1&quot; ] &amp;&amp; &#123; #看变量是否等于1,</span><br><span class="line">        echo 1</span><br><span class="line">        exit 0</span><br><span class="line">&#125;</span><br><span class="line">[ &quot;$var&quot; == &quot;2&quot; ] &amp;&amp; &#123;</span><br><span class="line">        echo 2</span><br><span class="line">        exit 0</span><br><span class="line">&#125;</span><br><span class="line">[ &quot;$var&quot; != &quot;2&quot; -a &quot;$var&quot; != &quot;1&quot; ] &amp;&amp; &#123;</span><br><span class="line">        echo error</span><br><span class="line">        exit 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# sh read.sh </span><br><span class="line">pls input a char:1</span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# sh read.sh </span><br><span class="line">pls input a char:2</span><br><span class="line">2</span><br><span class="line">[root@localhost scripts]# sh read.sh </span><br><span class="line">pls input a char:3</span><br><span class="line">error</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.使用脚本命令行传参读入内容</span></span><br><span class="line"> [root@localhost scripts]# vim read2.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">var=$1 #接收脚本的第一个参数$1赋值给var</span><br><span class="line">[ &quot;$var&quot; == &quot;1&quot; ] &amp;&amp; &#123;</span><br><span class="line">        echo 1</span><br><span class="line">        exit 0</span><br><span class="line">&#125;</span><br><span class="line">[ &quot;$var&quot; == &quot;2&quot; ] &amp;&amp; &#123;</span><br><span class="line">        echo 2</span><br><span class="line">        exit 0</span><br><span class="line">&#125;</span><br><span class="line">[ &quot;$var&quot; != &quot;1&quot; -a &quot;$var&quot; != &quot;2&quot; ] &amp;&amp; &#123;</span><br><span class="line">        echo error </span><br><span class="line"> </span><br><span class="line">[root@localhost scripts]# sh read2.sh 1</span><br><span class="line">1</span><br><span class="line">[root@localhost scripts]# sh read2.sh 2</span><br><span class="line">2</span><br><span class="line">[root@localhost scripts]# sh read2.sh 3</span><br><span class="line">error</span><br></pre></td></tr></table></figure><p><strong>实例2：实现以脚本传参和read读入的方式比较两个整数的大小。用条件表达式(禁止用if)进行判断并以屏幕输出的方式提醒用户比较的结果</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.采用<span class="built_in">read</span>方法</span></span><br><span class="line">[root@localhost scripts]# vim test.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">read -p &quot;pls input two num:&quot; a b</span><br><span class="line"></span><br><span class="line">[ -z &quot;$a&quot; ] || [ -z &quot;$b&quot; ]  &amp;&amp; &#123;</span><br><span class="line">        echo &quot;Pls input two num again.&quot;</span><br><span class="line">        exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expr $a + 10 &amp;&gt; /dev/null #判断$a是否为整数</span><br><span class="line">RETVAL1=$? #将返回值赋值给RETVAL1</span><br><span class="line">expr $b + 10 &amp;&gt; /dev/null</span><br><span class="line">RETVAL2=$?</span><br><span class="line">test $RETVAL1 -eq 0 -a $RETVAL2 -eq 0 || &#123;</span><br><span class="line">        echo &quot;Pls input two num again.&quot;</span><br><span class="line">        exit2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[ &quot;$a&quot; -lt &quot;$b&quot; ] &amp;&amp; &#123;</span><br><span class="line">        echo &quot;$a &lt; $b&quot;</span><br><span class="line">        exit 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[ &quot;$a&quot; -gt &quot;$b&quot; ] &amp;&amp; &#123;</span><br><span class="line">        echo &quot;$a &gt; $b&quot;</span><br><span class="line">        exit 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[ &quot;$a&quot; -eq &quot;$b&quot; ] &amp;&amp; &#123;</span><br><span class="line">        echo &quot;$a = $b&quot;</span><br><span class="line">        exit 0</span><br><span class="line">[root@localhost scripts]# sh test.sh </span><br><span class="line">pls input two num:6 2</span><br><span class="line">6 &gt; 2</span><br><span class="line">[root@localhost scripts]# sh test.sh </span><br><span class="line">pls input two num:6 6 </span><br><span class="line">6 = 6</span><br><span class="line">[root@localhost scripts]# sh test.sh </span><br><span class="line">pls input two num:2 6</span><br><span class="line">2 &lt; 6</span><br><span class="line">[root@localhost scripts]# sh test.sh </span><br><span class="line">pls input two num:</span><br><span class="line">Pls input two num again.</span><br><span class="line">[root@localhost scripts]# sh test.sh </span><br><span class="line">pls input two num:dd ff</span><br><span class="line">Pls input two num again.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.命令行传参</span></span><br><span class="line">[root@localhost scripts]# vim test2.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=$1</span><br><span class="line">b=$2</span><br><span class="line"></span><br><span class="line">[ $# -ne 2 ] &amp;&amp; &#123; # 判断传参个数是否是两个</span><br><span class="line">        echo &quot;USAGE:$0 NUM1 NUM2&quot; # 传参不和要求</span><br><span class="line">        exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expr $a + 10 &amp;&gt;/dev/null #整数判断</span><br><span class="line">RETVAL1=$?</span><br><span class="line">expr $b + 10 &amp;&gt;/dev/null</span><br><span class="line">RETVAL2=$?</span><br><span class="line">test $RETVAL1 -eq 0 -a $RETVAL2 -eq 0 || &#123;</span><br><span class="line">        echo &quot;Pls input two num again.&quot;</span><br><span class="line">        exit 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[ $a -lt $b ] &amp;&amp; &#123;</span><br><span class="line">        echo &quot;$a &lt; $b&quot;</span><br><span class="line">        exit 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[ $a -eq $b ] &amp;&amp;&#123;</span><br><span class="line">        echo &quot;$a = $b&quot;</span><br><span class="line">        exit 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[ $a -gt $b ] &amp;&amp; &#123;</span><br><span class="line">        echo &quot;$a &gt; $b&quot;</span><br><span class="line">[root@localhost scripts]# sh test2.sh  </span><br><span class="line">USAGE:test2.sh NUM1 NUM2</span><br><span class="line">[root@localhost scripts]# sh test2.sh 6 2</span><br><span class="line">6 &gt; 2</span><br><span class="line">[root@localhost scripts]# sh test2.sh 2 6</span><br><span class="line">2 &lt; 6</span><br><span class="line">[root@localhost scripts]# sh test2.sh 6 6</span><br><span class="line">6 = 6</span><br><span class="line">[root@localhost scripts]# sh test2.sh aa bb</span><br><span class="line">Pls input two num again.</span><br></pre></td></tr></table></figure><p><strong>实例3：打印选择菜单</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">要求：</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1）当输入1时，输出<span class="string">&quot;start installing lamp&quot;</span>提示，然后执行/server/scripts/lamp.sh输出<span class="string">&quot;lamp is installed&quot;</span>,并退出脚本</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2)当输入2时，输出<span class="string">&quot;start install lnmp&quot;</span>,然后执行/server/scripts/lnmp.sh输出<span class="string">&quot;lnmp is installed&quot;</span>，并退出脚本</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3)输入3时，退出当前菜单及脚本</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4)当输入任何其它字符时，输出提示<span class="string">&quot;Input erre&quot;</span>后退出脚本</span></span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# mkdir -p /server/scripts</span><br><span class="line">[root@localhost scripts]# cd /server/scripts/</span><br><span class="line">[root@localhost scripts]# echo &quot;echo lamp is installed&quot; &gt;lamp.sh</span><br><span class="line">[root@localhost scripts]# echo &quot;echo lnmp is installed&quot; &gt;lnmp.sh </span><br><span class="line">[root@localhost scripts]# chmod +x lnmp.sh lamp.sh </span><br><span class="line">[root@localhost scripts]# sh view.sh </span><br><span class="line">        1.[install lamp]</span><br><span class="line">        2.[install lnmp]</span><br><span class="line">        3.[exit]</span><br><span class="line">        pls input the num you want:</span><br><span class="line">1</span><br><span class="line">start installing lamp</span><br><span class="line">lamp is installed</span><br><span class="line">[root@localhost scripts]# sh view.sh </span><br><span class="line">        1.[install lamp]</span><br><span class="line">        2.[install lnmp]</span><br><span class="line">        3.[exit]</span><br><span class="line">        pls input the num you want:</span><br><span class="line">2</span><br><span class="line">start installing lnmp</span><br><span class="line">lnmp is installed</span><br><span class="line">[root@localhost scripts]# sh view.sh </span><br><span class="line">        1.[install lamp]</span><br><span class="line">        2.[install lnmp]</span><br><span class="line">        3.[exit]</span><br><span class="line">        pls input the num you want:</span><br><span class="line">3</span><br><span class="line">bye.</span><br><span class="line">[root@localhost scripts]# sh view.sh </span><br><span class="line">        1.[install lamp]</span><br><span class="line">        2.[install lnmp]</span><br><span class="line">        3.[exit]</span><br><span class="line">        pls input the num you want:</span><br><span class="line">5</span><br><span class="line">the num you input must be &#123;1|2|3&#125;</span><br><span class="line">Input ERROR</span><br></pre></td></tr></table></figure><h3 id="测试表达式的区别总结"><a href="#测试表达式的区别总结" class="headerlink" title="测试表达式的区别总结"></a>测试表达式的区别总结</h3><p><img src="/shell.assets/image-20210327202813129.png" alt="image-20210327202813129"></p><h2 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h2><p><strong>案例1：分别使用read读入及脚本传参的方式比较两个整数的大小</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# vim if.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">read -p &quot;pls iniput two num:&quot; a b</span><br><span class="line"></span><br><span class="line">expr $a + 10 &amp;&gt;/dev/null</span><br><span class="line">REVAL1=$?</span><br><span class="line">expr $B + 10 &amp;&gt; /dev/null</span><br><span class="line">REVAL2=$?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ $a -lt $b ];then</span><br><span class="line">        echo &quot;yes,$a less than $b&quot;</span><br><span class="line">        exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $a -eq $b ];then</span><br><span class="line">        echo &quot;yes,$a equal $b&quot;</span><br><span class="line">        exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $a -gt $b ];then</span><br><span class="line">        echo &quot;yes,$a greater than $b&quot;</span><br><span class="line">        exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>范例2：用if条件语句针对nginx服务或MySQL服务是否正常进行检测，如果服务未启动，则启动服务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# cat mysql.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ `netstat -lntup | grep mysqld | wc -l` -gt 0 ];then</span><br><span class="line">        echo &quot;MySQL is Running&quot;</span><br><span class="line">else</span><br><span class="line">        echo &quot;MySQL is Stopped&quot;</span><br><span class="line">        systemctl start mariadb</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# vim nginx.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ `netstat -lntup | grep nginx | wc -l` -gt 0 ];then</span><br><span class="line">        echo &quot;Nginx is Running&quot;</span><br><span class="line">else</span><br><span class="line">        echo &quot;Nginx is Stopped&quot;</span><br><span class="line">        systemctl start nginx</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><strong>范例3：if判断两个整数的大小扩展</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# cat test3.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">read -p &quot;Pls input two num:&quot; a b</span><br><span class="line"></span><br><span class="line">expr $a + 0 &amp;&gt;/dev/null</span><br><span class="line">RETVAL1=$?</span><br><span class="line">expr $b + 0 &amp;&gt;/dev/null</span><br><span class="line">RETVAL2=$?</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$a&quot; ] || [ -z &quot;$b&quot; ];then</span><br><span class="line">        echo &quot;Pls input two num again.&quot;</span><br><span class="line">        exit 1</span><br><span class="line">elif test $RETVAL1 -ne 0 -o $RETVAL2 -ne 0</span><br><span class="line">then</span><br><span class="line">        echo &quot;Pls input tow &quot;num&quot; again.&quot;</span><br><span class="line">        exit 2</span><br><span class="line">elif [ $a -lt $b ];then</span><br><span class="line">        echo &quot;$a &lt; $b&quot;</span><br><span class="line">elif [ $a -eq $b ];then</span><br><span class="line">        echo &quot;$a = $b&quot;</span><br><span class="line">else</span><br><span class="line">        echo &quot;$a &gt; $b&quot;</span><br><span class="line">fi</span><br><span class="line">exit 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# cat test4.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=$1</span><br><span class="line">b=$2</span><br><span class="line"></span><br><span class="line">if [ $# -ne 2 ];then</span><br><span class="line">        echo &quot;USAGE:$0 arg1 arg2&quot;</span><br><span class="line">        exit 2</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">expr $a + 0 &amp;&gt;/dev/null</span><br><span class="line">RETVAL1=$?</span><br><span class="line">expr $b + 0 &amp;&gt;/dev/null</span><br><span class="line">RETVAL2=$?</span><br><span class="line"></span><br><span class="line">if [ $RETVAL1 -ne 0 -o $RETVAL2 -ne 0 ];then</span><br><span class="line">        echo &quot;Pls input two int again.&quot;</span><br><span class="line">        exit 3</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $a -lt $b ];then</span><br><span class="line">        echo &quot;$a &lt; $b&quot;</span><br><span class="line">elif [ $a -eq $b ];then</span><br><span class="line">        echo &quot;$a = $b&quot;</span><br><span class="line">else</span><br><span class="line">        echo &quot;$a &gt; $b&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><strong>范例4：判断字符串是否为数字</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.使用sed加正则表达式</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">思路：删除一个字符串中的所有数字，看字符串的长度是否为0，如果不为0，则说明不是整数</span></span><br><span class="line">[root@localhost scripts]# [ -n &quot;`echo oldboy123 | sed &#x27;s/[0-9]//g&#x27;`&quot; ] &amp;&amp; echo char || echo int</span><br><span class="line">char</span><br><span class="line">[root@localhost scripts]# [ -n &quot;`echo 123 | sed &#x27;s/[0-9]//g&#x27;`&quot; ] &amp;&amp; echo char || echo int</span><br><span class="line">int</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.变量的子串替换加正则表达式</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">思路：如果num的长度不为0，并且把num中的非数字部分删除，然后在看结果是不是等于num本身，如果两者都成立，则num就是数字</span></span><br><span class="line">[root@localhost scripts]# num=521</span><br><span class="line">[root@localhost scripts]# [ -n &quot;$num&quot; -a &quot;$num&quot; = &quot;$&#123;num//[^0-9]/&#125;&quot; ] &amp;&amp; echo &quot;it is num&quot; || echo &quot;isn&#x27;t num&quot;</span><br><span class="line">it is num</span><br><span class="line">[root@localhost scripts]# num=oldboy123</span><br><span class="line">[root@localhost scripts]# [ -n &quot;$num&quot; -a &quot;$num&quot; = &quot;$&#123;num//[^0-9]/&#125;&quot; ] &amp;&amp; echo &quot;it is num&quot; || echo &quot;isn&#x27;t num&quot;</span><br><span class="line">isn&#x27;t num</span><br></pre></td></tr></table></figure><h2 id="shell函数"><a href="#shell函数" class="headerlink" title="shell函数"></a>shell函数</h2><p><strong>范例1：简单函数的执行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">▽root@localhost scripts]# vim func.sh</span><br><span class="line">        echo &quot;I am oldgirl&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">oldboy()&#123;</span><br><span class="line">        echo &quot;I am oldboy&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function oldgirl()&#123;</span><br><span class="line">        echo &quot;I am oldgirl&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">oldboy</span><br><span class="line">oldgirl</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# sh func.sh </span><br><span class="line">I am oldboy</span><br><span class="line">I am oldgirl</span><br></pre></td></tr></table></figure><p><strong>范例2：分离函数体和执行函数的脚本文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">首先建立函数库脚本(默认不会执行函数)</span></span><br><span class="line">[root@localhost scripts]# cat func.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">oldgirl()&#123;</span><br><span class="line">        echo &quot;I am oldgirl.you are $1&quot;</span><br><span class="line">&#125;</span><br><span class="line">[root@localhost scripts]# cat func2.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">path=/opt/server/scripts/func.sh</span><br><span class="line">[ -f &quot;$path&quot; ] &amp;&amp; source $path || exit 1</span><br><span class="line">oldgirl zxy</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# sh func2.sh </span><br><span class="line">I am oldgirl.you are zxy</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>范例2：开发企业级URL检测脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# vim 8_5_1.sh </span><br><span class="line">  1 #!/bin/bash</span><br><span class="line">  2 </span><br><span class="line">  3 usage()&#123;</span><br><span class="line">  4         echo &quot;usage:$0 url&quot;</span><br><span class="line">  5         exit 1</span><br><span class="line">  6 &#125;</span><br><span class="line">  7 </span><br><span class="line">  8 check_url()&#123;</span><br><span class="line">  9         wget --spider -q -o /dev/null --tries=1 -T 5 $1</span><br><span class="line"> 10         if [ $? -eq 0 ];then</span><br><span class="line"> 11                 echo &quot;$1 is yes.&quot;</span><br><span class="line"> 12         else</span><br><span class="line"> 13                 echo &quot;$1 is no.&quot;</span><br><span class="line"> 14         fi</span><br><span class="line"> 15 &#125;</span><br><span class="line"> 16 </span><br><span class="line"> 17 </span><br><span class="line"> 18 main()&#123;</span><br><span class="line"> 19         if [ $# -ne 1 ];then</span><br><span class="line"> 20                 usage</span><br><span class="line"> 21         fi</span><br><span class="line"> 22         check_url $1 #接收函数的参数 即下文main结尾的$*传到这里</span><br><span class="line"> 23 &#125;</span><br><span class="line"> 24 main $* #这里的$*是把命令接收的所有参数作为函数参数传给函数内部</span><br><span class="line"> </span><br><span class="line"> [root@localhost scripts]# sh 8_5_1.sh </span><br><span class="line">usage:8_5_1.sh url</span><br><span class="line">[root@localhost scripts]# sh 8_5_1.sh www.baidu.co</span><br><span class="line">www.baidu.co is no.</span><br><span class="line">[root@localhost scripts]# sh 8_5_1.sh www.baidu.com</span><br><span class="line">www.baidu.com is yes.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">专业版</span></span><br><span class="line">▽root@localhost scripts]# vim 8_6.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">source /etc/init.d/functions</span><br><span class="line"></span><br><span class="line">usage()&#123;</span><br><span class="line">        echo &quot;usage:$0 url&quot;</span><br><span class="line">        exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check_url()&#123;</span><br><span class="line">        wget --spider -q -o /dev/null --tries=1 -T 5 $1</span><br><span class="line">        if [ $? -eq 0 ];then</span><br><span class="line">                action &quot;$1 is yes.&quot; /bin/true  #这里的action就是系统函数库里调用的</span><br><span class="line">        else</span><br><span class="line">                action &quot;$1 is no.&quot; /bin/false</span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">        if [ $# -ne 1 ];then</span><br><span class="line">                usage</span><br><span class="line">        fi</span><br><span class="line">        check_url $1</span><br><span class="line">&#125;</span><br><span class="line">main $*</span><br><span class="line">[root@localhost scripts]# sh 8_6.sh </span><br><span class="line">usage:8_6.sh url</span><br><span class="line">[root@localhost scripts]# sh 8_6.sh www.baidu.co</span><br><span class="line">www.baidu.co is no.                                        [FAILED]</span><br><span class="line">[root@localhost scripts]# sh 8_6.sh www.baidu.com</span><br><span class="line">www.baidu.com is yes.                                      [  OK  ]</span><br></pre></td></tr></table></figure><h2 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h2><p><strong>范例1：根据用户的输入判断用户输入的是哪个数字</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1-9任意数字</span></span><br><span class="line">[root@localhost scripts]# cat 9_1.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">read -p &quot;Please input a number:&quot; ans</span><br><span class="line">case &quot;$ans&quot; in</span><br><span class="line">        1)</span><br><span class="line">                echo &quot;The num you input is 1&quot;</span><br><span class="line">                ;;</span><br><span class="line">        2)</span><br><span class="line">                echo &quot;The num you input is 2&quot;</span><br><span class="line">                ;;</span><br><span class="line">        [309]) #3-9中的任意数字</span><br><span class="line">                echo &quot;The num you input is $ans&quot;</span><br><span class="line">                ;;</span><br><span class="line">        *) #如果不匹配上面任何一个值</span><br><span class="line">                echo &quot;Please input [0-9] int&quot;</span><br><span class="line">                exit;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p><strong>范例2：打印一个水果菜单</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给字体加颜色的命令</span></span><br><span class="line">[root@localhost scripts]# echo -e &quot;\E[1;31m红色 oldboy\E[0m&quot;</span><br><span class="line">红色 oldboy</span><br><span class="line">[root@localhost scripts]# echo -e &quot;\033[1;31m红色 oldboy\033[0m&quot;</span><br><span class="line">红色 oldboy</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> -e 可以识别转义字符</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">\E  可以使用 \033替代</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;[1&quot;</span>数字1表示加粗显示</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">31m表示为红色字体 不同的数字代表不同的意思</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;[0m&quot;</span>表示关闭所有属性 不同数字代表不同的意思</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">\33[0m 表示关闭所有属性</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">\33[1m 表示设置高亮度</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">\33[4m 表示下划线</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">\33[5m 表示闪烁</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">\33[7m 表示反显</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">\33[8m 表示消隐</span></span><br><span class="line">[root@localhost scripts]# cat plush_color.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">RED_COLOR=&#x27;\E[1;31m&#x27;</span><br><span class="line">GREEN_COLOR=&#x27;\E[1;32m&#x27;</span><br><span class="line">YELLOW_COLOR=&#x27;\E[1;33m&#x27;</span><br><span class="line">BLUE_COLOR=&#x27;\E[1;34m&#x27;</span><br><span class="line">RES=&#x27;\E[0m&#x27;</span><br><span class="line"></span><br><span class="line">echo -e &quot;$RED_COLOR oldboy $RES&quot;</span><br><span class="line">echo -e &quot;$YELLOW_COLOR oldgirl $RES&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# cat 9_2.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">RED_COLOR=&#x27;\E[1;31m&#x27;</span><br><span class="line">GREEN_COLOR=&#x27;\E[1;32m&#x27;</span><br><span class="line">YELLOW_COLOR=&#x27;\E[1;33m&#x27;</span><br><span class="line">BLUE_COLOR=&#x27;\E[1;34m&#x27;</span><br><span class="line">RES=&#x27;\E[0m&#x27;</span><br><span class="line"></span><br><span class="line">echo &#x27;</span><br><span class="line">        ========================</span><br><span class="line">        1.apple</span><br><span class="line">        2.pear</span><br><span class="line">        3.banana</span><br><span class="line">        4.cherry</span><br><span class="line">&#x27;</span><br><span class="line"></span><br><span class="line">read -p &quot;Pls select a num:&quot; num</span><br><span class="line">case &quot;$num&quot; in</span><br><span class="line">        1)</span><br><span class="line">                echo -e &quot;$RED_COLOR apple $RES&quot;</span><br><span class="line">                ;;</span><br><span class="line">        2)</span><br><span class="line">                echo -e &quot;$&#123;GREEN_COLOR&#125;pear$&#123;RES&#125;&quot;</span><br><span class="line">                ;;</span><br><span class="line">        3)</span><br><span class="line">                echo -e &quot;$&#123;YELLOW_COLOR&#125;banana$&#123;RES&#125;&quot;</span><br><span class="line">                ;;</span><br><span class="line">        4)</span><br><span class="line">                echo -e &quot;$&#123;BLUE_COLOR&#125;cherry$&#123;RES&#125;&quot;</span><br><span class="line">                ;;</span><br><span class="line">        *)</span><br><span class="line">                echo &quot;muse be &#123;1|2|3|4&#125;&quot;</span><br><span class="line">esac</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">函数版本</span></span><br><span class="line">[root@localhost scripts]# vim 9_2_1.sh</span><br><span class="line">        exit 1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">RED_COLOR=&#x27;\E[1;31m&#x27;</span><br><span class="line">GREEN_COLOR=&#x27;\E[1;32m&#x27;</span><br><span class="line">YELLOW_COLOR=&#x27;\E[1;33m&#x27;</span><br><span class="line">BLUE_COLOR=&#x27;\E[1;34m&#x27;</span><br><span class="line">RES=&#x27;\E[0m&#x27;</span><br><span class="line"></span><br><span class="line">usage()&#123;</span><br><span class="line">        echo &quot;USAGE:$0 &#123;1|2|3|4&#125;&quot;</span><br><span class="line">        exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">menu()&#123;</span><br><span class="line">        cat &lt;&lt;END</span><br><span class="line">        1.apple</span><br><span class="line">        2.pear</span><br><span class="line">        3.banana</span><br><span class="line">END</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chose()&#123;</span><br><span class="line">        read -p &quot;pls input your choice:&quot; fruit</span><br><span class="line">        case &quot;$fruit&quot; in</span><br><span class="line">        1)</span><br><span class="line">                echo -e &quot;$RED_COLOR apple $RES&quot;</span><br><span class="line">        ;;      </span><br><span class="line">        2)</span><br><span class="line">                echo -e &quot;$GREEN_COLOR pear $RES&quot;</span><br><span class="line">        ;;</span><br><span class="line">        3)</span><br><span class="line">                echo -e &quot;$YELLOW_COLOR banbana $RES&quot;</span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">                usage</span><br><span class="line">esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">        menu</span><br><span class="line">        chose</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>范例3：给输出的字符串加颜色</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# cat color.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">AddColor()&#123;</span><br><span class="line">        RED_COLOR=&#x27;\E[1;31m&#x27;</span><br><span class="line">        GREEN_COLOR=&#x27;\E[1;32m&#x27;</span><br><span class="line">        YELLOW_COLOR=&#x27;\E[1;33m&#x27;</span><br><span class="line">        BLUE_COLOR=&#x27;\E[1;34m&#x27;</span><br><span class="line">        PINK_COLOR=&#x27;\E[1;35m&#x27;</span><br><span class="line">        RES=&#x27;\E[0m&#x27;</span><br><span class="line"></span><br><span class="line">if [ $# -ne 2 ];then</span><br><span class="line">        echo &quot;Uage $0 content &#123;read|yellow|blue|green&#125;&quot;</span><br><span class="line">        exit</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line">case &quot;$2&quot; in</span><br><span class="line">        read|READ)</span><br><span class="line">                echo -e &quot;$RED_COLOR $1 $RES&quot;</span><br><span class="line">                ;;</span><br><span class="line">        yellow|YELLOW)</span><br><span class="line">                echo -e &quot;$YELLOW_COLOR $1 $RES&quot;</span><br><span class="line">                ;;</span><br><span class="line">        green|GREEN)</span><br><span class="line">                echo -e &quot;$GREEN_COLOR $1 $RES&quot;</span><br><span class="line">                ;;</span><br><span class="line">        blue|BLUE)</span><br><span class="line">                echo -e &quot;$BLUE_COLOR $1 $RES&quot;</span><br><span class="line">                ;;</span><br><span class="line">        pink|PINK)</span><br><span class="line">                echo -e &quot;$PINK_COLOR $1 $RES&quot;</span><br><span class="line">                ;;</span><br><span class="line">        *)</span><br><span class="line">                echo &quot;Usage $0 content &#123;read|yellow|blue|green&#125;&quot;</span><br><span class="line">                exit</span><br><span class="line">esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">        AddColor $1 $2</span><br><span class="line">&#125;</span><br><span class="line">main $*</span><br></pre></td></tr></table></figure><p><strong>范例4：通过传参的方式往&#x2F;etc&#x2F;openvpn_authfile.conf里添加用户</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令用法</span></span><br><span class="line">USAGE: sh adduser &#123;-add|-del_search&#125; username</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果有同名的用户，则不能添加，如果没有，则无需删除，查找到用户或没有用户时给出明确提示</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/openvpn_authfile.conf 不能被所有外部用户直接删除及修改</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">source /etc/init.d/functions</span><br><span class="line"></span><br><span class="line">FILE_PATH=/etc/openvpn_authfile.conf</span><br><span class="line"></span><br><span class="line">[ ! -f $FILE_PATH ] &amp;&amp; touch $FILE_PATH #如果对应的文件不存在 则创建</span><br><span class="line"></span><br><span class="line">usage()&#123;</span><br><span class="line">        cat &lt;&lt;EOF</span><br><span class="line">        USAGE:`basename $0` &#123;-add|-del|-search&#125; username</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [ $UID -ne 0 ];then</span><br><span class="line">        echo &quot;You are not supper user,please call root!&quot;</span><br><span class="line">        exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $# -ne 2 ];then</span><br><span class="line">        usage</span><br><span class="line">        exit 2</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">        -a|-add)</span><br><span class="line">                shift #将$1清除，将$2替换为$1,位置参数左移</span><br><span class="line">                if grep &quot;^$1$&quot; $FILE_PATH &gt;/dev/null 2&gt;&amp;1 #过滤命令行第一个参数的值</span><br><span class="line">                        then</span><br><span class="line">                                action $&quot;vpnuser,$1 is exist&quot; /bin/false</span><br><span class="line">                                exit</span><br><span class="line">                else</span><br><span class="line">                        chattr -i $FILE_PATH #解锁文件</span><br><span class="line">                        /bin/cp $&#123;FILE_PATH&#125; $&#123;FILE_PATH&#125;.$(date +%F%T)</span><br><span class="line">                        echo &quot;$1&quot; &gt;&gt; $&#123;FILE_PATH&#125;</span><br><span class="line">                        [ $? -eq 0 ] &amp;&amp; action $&quot;Add $1&quot; /bin/true</span><br><span class="line">                        chattr +i $FILE_PATH #加锁</span><br><span class="line">                fi</span><br><span class="line">                ;;</span><br><span class="line"></span><br><span class="line">        -d|-del)</span><br><span class="line">                shift</span><br><span class="line">                if [ `grep &quot;\b$1\b&quot; $&#123;FILE_PATH&#125; | wc -l` -lt 1 ] #过滤第一个参数值，并看文件中是否存在</span><br><span class="line">                        then # 弱不存在</span><br><span class="line">                                action $&quot;vpnuser,$1 is not exist.&quot; /bin/false;</span><br><span class="line">                                exit</span><br><span class="line">                else</span><br><span class="line">                        chattr -i $&#123;FILE_PATH&#125;</span><br><span class="line">                        /bin/cp $&#123;FILE_PATH&#125; $&#123;FILE_PATH&#125;.$(date +%F%T)</span><br><span class="line">                        sed -i &quot;/^$&#123;1&#125;/d&quot; $&#123;FILE_PATH&#125; #删除文件中包含命令行传参的用户</span><br><span class="line">                        [ $? -eq 0 ] &amp;&amp; action $&quot;Del $1&quot; /bin/true</span><br><span class="line">                        chattr +i $FILE_PATH</span><br><span class="line">                        exit</span><br><span class="line">                fi</span><br><span class="line">                ;;</span><br><span class="line">        -e|-search)</span><br><span class="line">                shift</span><br><span class="line">                if [ `grep -w &quot;$1&quot; $&#123;FILE_PATH&#125; | wc -l` -lt 1 ]</span><br><span class="line">                        then</span><br><span class="line">                                echo $&quot;vpnuser,$1 is not exist.&quot;;</span><br><span class="line">                                exit</span><br><span class="line">                else</span><br><span class="line">                        echo $&quot;vpnuser,$1 is exist.&quot;;</span><br><span class="line">                        exit</span><br><span class="line">                fi</span><br><span class="line">                ;;</span><br><span class="line">        *)</span><br><span class="line">                usage</span><br><span class="line">                exit</span><br><span class="line">                ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h2 id="while循环和until循环"><a href="#while循环和until循环" class="headerlink" title="while循环和until循环"></a>while循环和until循环</h2><p><strong>范例1：每隔2秒输出一次系统负载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# vim 10_1_1.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">        uptime &gt;&gt;/tmp/uptime.log</span><br><span class="line">        #sleep 2</span><br><span class="line">        usleep 2000000 #微秒</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# sh 10_1_1.sh &amp;</span><br><span class="line">[1] 2292</span><br><span class="line">[root@localhost scripts]# tail -f /tmp/uptime.log </span><br><span class="line"> 14:08:44 up 4 min,  1 user,  load average: 0.06, 0.35, 0.20</span><br><span class="line"> 14:08:46 up 4 min,  1 user,  load average: 0.06, 0.35, 0.20</span><br><span class="line"> 14:08:48 up 4 min,  1 user,  load average: 0.05, 0.34, 0.20</span><br></pre></td></tr></table></figure><p><strong>范例2：猜数字游戏。首先让系统随机生成一个数字，给这个数字设定一个范围(1-60)，让用户输入所猜的数字。游戏规则是：对输入进行判断，如果不符合要求，就给予高或低的提示，猜对后则给出猜对所用的次数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# cat cai.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">total=0 #初始化猜的次数为0</span><br><span class="line">export LANG=&quot;zh_CN.UTF-8&quot; #指定中文字符集</span><br><span class="line">NUM=$((RANDOM%61)) #随机数除以61取余数，最大值不超过60，每执行一次脚本就会生成一个处于1-60之间的随机数字</span><br><span class="line">echo &quot;当前苹果的价格是每斤$NUM元&quot;</span><br><span class="line">echo &quot;===========================&quot;</span><br><span class="line">usleep 1000000</span><br><span class="line">clear</span><br><span class="line">echo &quot;这苹果多少钱一斤？</span><br><span class="line">      请猜0-60的数字&quot;</span><br><span class="line"></span><br><span class="line">apple()&#123;</span><br><span class="line">        read -p &quot;请输入你的价格:&quot; PRICE</span><br><span class="line">        expr $PRICE + 1 &amp;&gt;/dev/null #判断是否为整数</span><br><span class="line">        if [ $? -ne 0 ];then</span><br><span class="line">                echo &quot;请正确输入整数&quot;</span><br><span class="line">                apple #重新加载函数</span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">guess()&#123;</span><br><span class="line">        ((total++))</span><br><span class="line">        if [ $PRICE -eq $NUM ];then</span><br><span class="line">                echo &quot;猜对了，就是$NUM元&quot;</span><br><span class="line">                if [ $total -le 3 ];then #如果猜的次数小于3次</span><br><span class="line">                        echo &quot;一共猜了$total次&quot;</span><br><span class="line">                elif [ $total -gt 3 -a $total -le 6 ];then #3-6次</span><br><span class="line">                        echo &quot;一共猜了$total次，加油&quot;</span><br><span class="line">                elif [ $total -gt 6 ];then</span><br><span class="line">                        echo &quot;一共猜了$total次，猜的太多次了&quot;</span><br><span class="line">                fi</span><br><span class="line">                exit 0 #猜对后退出脚本</span><br><span class="line">        elif [ $PRICE -gt $NUM ];then #如果用户输入的价格大于随机生成的价格</span><br><span class="line">                echo &quot;高了&quot;</span><br><span class="line">                echo &quot;再给你一次机会，请继续猜：&quot;</span><br><span class="line">                apple</span><br><span class="line">        elif [ $PRICE -lt $NUM ];then #如果用户输入的价格小于随机生成的价格</span><br><span class="line">                echo &quot;低了&quot;</span><br><span class="line">                echo &quot;再给你一次机会，请继续猜：&quot;</span><br><span class="line">                apple</span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">        apple</span><br><span class="line">        while true</span><br><span class="line">        do</span><br><span class="line">                guess</span><br><span class="line">        done</span><br><span class="line">&#125;</span><br><span class="line">main</span><br></pre></td></tr></table></figure><p><strong>范例3：手机充值10元，每发一次短信(输出当前余额)花费1角5分钱，当余额低于1角5分钱时就不能在发短信了，提示“余额不足，请充值”(允许用户充值后继续发短信)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# cat phone.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">10元=1000分</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1角5分=15分</span></span><br><span class="line"></span><br><span class="line">export LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">sum=15 # 初始总费用为15</span><br><span class="line">msg_fee=15 #发一条短信需要15</span><br><span class="line">msg_count=10 #初始发送次数为0</span><br><span class="line"></span><br><span class="line">menu()&#123;</span><br><span class="line">        cat &lt;&lt;END</span><br><span class="line">当前余额为$&#123;sum&#125;分，每条短信需要$&#123;msg_fee&#125;分</span><br><span class="line">===========================================</span><br><span class="line">        1.充值</span><br><span class="line">        2.发信息</span><br><span class="line">        3.退出</span><br><span class="line">===========================================</span><br><span class="line">END</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">recharge()&#123;</span><br><span class="line">        read -p &quot;请输入金额充值:&quot; money</span><br><span class="line">        expr $money + 1 &amp;&gt;/dev/null</span><br><span class="line">        if [ $? -ne 0 ];then</span><br><span class="line">                echo &quot;then money your input is error,must be int.&quot;</span><br><span class="line">        else</span><br><span class="line">                sum=$(($sum+$money))</span><br><span class="line">                echo &quot;当前余额为:$sum&quot;</span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sendInfo()&#123;</span><br><span class="line">        if [ $&#123;sum&#125; -lt $msg_fee ];then #如果总费用小于15</span><br><span class="line">                echo &quot;余额不足:$&#123;sum&#125;,请充值。&quot;</span><br><span class="line">        else</span><br><span class="line">                while true</span><br><span class="line">                do</span><br><span class="line">                        read -p &quot;请输入短信内容(不能有空格):&quot; msg</span><br><span class="line">                        sum=$(($&#123;sum&#125;-$&#123;msg_fee&#125;))</span><br><span class="line">                        echo &quot;Send &quot;$msg&quot; successffully!&quot;</span><br><span class="line">                        echo &quot;当前余额为:$sum&quot;</span><br><span class="line">                        if [ $sum -lt  $msg_fee ];then</span><br><span class="line">                                echo &quot;余额不足，剩余$sum分&quot;</span><br><span class="line">                                return 1 #跳出循环和函数</span><br><span class="line">                        fi</span><br><span class="line">                done</span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">        while true</span><br><span class="line">        do</span><br><span class="line">                menu</span><br><span class="line">                read -p &quot;请输入选择项:&quot; men</span><br><span class="line">                case &quot;$men&quot; in</span><br><span class="line">                        1)</span><br><span class="line">                                recharge</span><br><span class="line">                                ;;</span><br><span class="line">                        2)</span><br><span class="line">                                sendInfo</span><br><span class="line">                                ;;</span><br><span class="line">                        3)</span><br><span class="line">                                exit 1</span><br><span class="line">                                ;;</span><br><span class="line">                        *)</span><br><span class="line">                                echo &quot;选择错误,&#123;1|2|3&#125;&quot;</span><br><span class="line">                esac</span><br><span class="line">        done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# sh phone.sh </span><br><span class="line">当前余额为15分，每条短信需要15分</span><br><span class="line">===========================================</span><br><span class="line">        1.充值</span><br><span class="line">        2.发信息</span><br><span class="line">        3.退出</span><br><span class="line">===========================================</span><br><span class="line">请输入选择项:2</span><br><span class="line">请输入短信内容(不能有空格):oldboy</span><br><span class="line">Send oldboy successffully!</span><br><span class="line">当前余额为:0</span><br><span class="line">余额不足，剩余0分</span><br><span class="line">当前余额为0分，每条短信需要15分</span><br><span class="line">===========================================</span><br><span class="line">        1.充值</span><br><span class="line">        2.发信息</span><br><span class="line">        3.退出</span><br><span class="line">===========================================</span><br><span class="line">请输入选择项:1</span><br><span class="line">请输入金额充值:16</span><br><span class="line">当前余额为:16</span><br><span class="line">当前余额为16分，每条短信需要15分</span><br><span class="line">===========================================</span><br><span class="line">        1.充值</span><br><span class="line">        2.发信息</span><br><span class="line">        3.退出</span><br><span class="line">===========================================</span><br><span class="line">请输入选择项:2</span><br><span class="line">请输入短信内容(不能有空格):oldgirl</span><br><span class="line">Send oldgirl successffully!</span><br><span class="line">当前余额为:1</span><br><span class="line">余额不足，剩余1分</span><br><span class="line">当前余额为1分，每条短信需要15分</span><br><span class="line">===========================================</span><br><span class="line">        1.充值</span><br><span class="line">        2.发信息</span><br><span class="line">        3.退出</span><br><span class="line">===========================================</span><br><span class="line">请输入选择项:3</span><br></pre></td></tr></table></figure><p><strong>范例四：监控网站，每隔10秒确定一次网站是否正常</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# cat url.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">source /etc/init.d/functions</span><br><span class="line">if [ $# -ne 1 ]; then</span><br><span class="line">        echo $&quot;usage $0 url&quot;</span><br><span class="line">        exit 1</span><br><span class="line">fi</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">        if [ `curl -o /dev/null --connect-timeout 5 -s -w &quot;%&#123;http_code&#125;&quot; $1 | egrep -w &quot;200|301|302&quot;|wc -l` -ne 1 ];then</span><br><span class="line">                action &quot;$1 is error.&quot; /bin/false</span><br><span class="line">        else</span><br><span class="line">                action &quot;$1 is ok&quot; /bin/true</span><br><span class="line">        fi</span><br><span class="line">        sleep 10</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="for循环和select循环"><a href="#for循环和select循环" class="headerlink" title="for循环和select循环"></a>for循环和select循环</h2><p><strong>范例1：批量创建10个账户(oldboy01-oldbou10)，并设置密码(密码为随机数，要求是字符和数字的混合)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# cat user.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">source /etc/init.d/functions</span><br><span class="line">user=&quot;oldboy&quot;</span><br><span class="line">passfile=&quot;/tmp/user.log&quot;</span><br><span class="line"></span><br><span class="line">for num in `seq -w 10`</span><br><span class="line">do</span><br><span class="line">        pass=&quot;`echo &quot;test$RANDOM&quot;|md5sum|cut -c3-11`&quot;</span><br><span class="line">        useradd $user$num &amp;&gt;/dev/null &amp;&amp;\</span><br><span class="line">        echo &quot;$pass&quot;|passwd --stdin $user$num &amp;&gt;/dev/null &amp;&amp;\</span><br><span class="line">        echo -e &quot;user:$user$num\tpasswd:$pass&quot; &gt;&gt; $passfile</span><br><span class="line">        if [ $? -eq 0 ];then</span><br><span class="line">                action &quot;$user$num is ok&quot; /bin/true</span><br><span class="line">        else</span><br><span class="line">                action &quot;$user$num is fail&quot; /bin/false</span><br><span class="line">        fi</span><br><span class="line">done</span><br><span class="line">echo -----------------------------------</span><br><span class="line">cat $passfile &amp;&amp; &gt;$passfile</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>select循环语句的主要作用可能就是创建菜单</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select 变量名 [ in 菜单取值列表 ]</span><br><span class="line">do</span><br><span class="line">指令...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>范例1：打印选择菜单，按照选择一键安装不同的web服务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# cat menu.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">RETVAR=0</span><br><span class="line">path=/opt/server/scripts</span><br><span class="line">[ ! -d &quot;$path&quot; ] &amp;&amp; mkdir -p $path</span><br><span class="line"></span><br><span class="line">usage()&#123;</span><br><span class="line">        echo &quot;usage:$0 argv&quot;</span><br><span class="line">        return 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">InstallService()&#123;</span><br><span class="line">        if [ $# -ne 1 ];then</span><br><span class="line">                usage</span><br><span class="line">        fi</span><br><span class="line">        local RETVAR=0 #初始化返回值</span><br><span class="line">        echo &quot;start installing $&#123;1&#125;&quot; #传参$1 是函数的参数</span><br><span class="line">        sleep 2;</span><br><span class="line">        if [ ! -x &quot;$path/$&#123;1&#125;.sh&quot; ];then #如果安装服务脚本不可执行</span><br><span class="line">                echo &quot;$path/$&#123;1&#125;.sh does not exist or can not be exec&quot;</span><br><span class="line">                return 1</span><br><span class="line">        else</span><br><span class="line">                $path/$&#123;1&#125;.sh</span><br><span class="line">                return $RETVARv #返回值返回函数体</span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">        PS3=&quot;`echo pls input the num you want:`&quot; </span><br><span class="line">        select var in &quot;Install lamp&quot; &quot;Install lnmp&quot; &quot;exit&quot;</span><br><span class="line">        do</span><br><span class="line">                case &quot;$var&quot; in</span><br><span class="line">                        &quot;Install lamp&quot;)</span><br><span class="line">                                InstallService lamp #调用安装服务函数</span><br><span class="line">                                RETVAR=$? #将脚本执行结果返回函数体外</span><br><span class="line">                                ;;</span><br><span class="line">                        &quot;Install lnmp&quot;)</span><br><span class="line">                                InstallService lnmp</span><br><span class="line">                                RETVAR=$?</span><br><span class="line">                                ;;</span><br><span class="line">                        &quot;exit&quot;)</span><br><span class="line">                                echo &quot;bye&quot;</span><br><span class="line">                                return 3</span><br><span class="line">                                ;;</span><br><span class="line">                        *)</span><br><span class="line">                                echo &quot;the num you input must be &#123;1|2|3&#125;&quot;</span><br><span class="line">                                echo &quot;Input ERROR&quot;</span><br><span class="line">                esac</span><br><span class="line">        done</span><br><span class="line">exit $RETVAR</span><br><span class="line">&#125;</span><br><span class="line">main</span><br></pre></td></tr></table></figure><h2 id="循环状态及状态返回值"><a href="#循环状态及状态返回值" class="headerlink" title="循环状态及状态返回值"></a>循环状态及状态返回值</h2><p><strong>范例1：为服务器临时配置多个IP，并且可以随时撤销配置的所有IP，IP的地址范围为:10.0.2.1-10.0.2.16，其中10.0.2.10不能配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# cat ip.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">[ -f /etc/init.d/functions ] &amp;&amp; source /etc/init.d/functions</span><br><span class="line">RETVAL=0</span><br><span class="line">op()&#123;</span><br><span class="line">        if [ &quot;$1&quot; == &quot;del&quot; ];then</span><br><span class="line">                list=`echo &#123;16..1&#125;`</span><br><span class="line">        else</span><br><span class="line">                list=`echo &#123;1..16&#125;`</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        for ip in $list</span><br><span class="line">        do</span><br><span class="line">                if [ $ip -eq 10 ];then</span><br><span class="line">                        continue</span><br><span class="line">                fi</span><br><span class="line">                ip addr $1 10.0.2.$ip/24 dev ens34 label ens34:$ip &amp;&gt;/dev/null</span><br><span class="line">                RETVAL=$?</span><br><span class="line">                if [ $RETVAL -eq 0 ];then</span><br><span class="line">                        action &quot;$1 $ip&quot; /bin/true</span><br><span class="line">                else</span><br><span class="line">                        action &quot;$1 $ip&quot; /bin/false</span><br><span class="line">                fi</span><br><span class="line">        done</span><br><span class="line">        return $RETVAL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">        start)</span><br><span class="line">                op add</span><br><span class="line">                RETVAL=$?</span><br><span class="line">                ;;</span><br><span class="line">        stop)</span><br><span class="line">                op del</span><br><span class="line">                RETVAL=$?</span><br><span class="line">                ;;</span><br><span class="line">        restart)</span><br><span class="line">                op del</span><br><span class="line">                sleep 2</span><br><span class="line">                op add</span><br><span class="line">                RETVAL=$?</span><br><span class="line">                ;;</span><br><span class="line">        *)</span><br><span class="line">                printf &quot;USAGE:$0 &#123;start|stop|restart&#125;\n&quot;</span><br><span class="line">esac</span><br><span class="line">exit $RETVAL</span><br></pre></td></tr></table></figure><h2 id="shell数组"><a href="#shell数组" class="headerlink" title="shell数组"></a>shell数组</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">语法如下</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">一、用小括号将变量值括起来赋值给数组变量，每个变量之间用空格分离</span></span><br><span class="line">[root@localhost scripts]# array=(1 2 3)</span><br><span class="line">[root@localhost scripts]# echo $&#123;array[*]&#125;</span><br><span class="line">1 2 3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">二、用小括号将变量值括起来，同时采用键值对的形式赋值</span></span><br><span class="line">[root@localhost scripts]# array=([1]=one [2]=two [3]=three)</span><br><span class="line">[root@localhost scripts]# echo $&#123;array[*]&#125;</span><br><span class="line">one two three</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# echo $&#123;array[@]&#125; # *和#效果一样</span><br><span class="line">one two three</span><br><span class="line">[root@localhost scripts]# echo $&#123;#array[*]&#125; #打印数组长度</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">[root@localhost scripts]# unset array[1] # 数组删除</span><br><span class="line">[root@localhost scripts]# echo $&#123;array[@]&#125; </span><br><span class="line">two three</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">数组内容的截取和替换</span></span><br><span class="line">[root@localhost scripts]# array=(1 2 3 4 5)</span><br><span class="line">[root@localhost scripts]# echo $&#123;array[*]:1:3&#125;</span><br><span class="line">2 3 4</span><br><span class="line">[root@localhost scripts]# echo $&#123;array[*]/1/b&#125; #原数组未被修改</span><br><span class="line">b 2 3 4 5</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="shell数组的重要命令"><a href="#shell数组的重要命令" class="headerlink" title="shell数组的重要命令"></a>shell数组的重要命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">静态数组：</span></span><br><span class="line">array=(1 2 3)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">动态数组</span></span><br><span class="line">array=($(ls))</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">为数组赋值</span></span><br><span class="line">array[3]=4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打印所有元素</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;array[@]&#125; 或 <span class="variable">$&#123;array[*]&#125;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打印数组长度</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;<span class="comment">#array[@]&#125; 或 $&#123;#array[*]&#125;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打印单个元素</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;array[i]&#125;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">循环打印</span></span><br><span class="line">[root@localhost scripts]# cat for.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">array=(</span><br><span class="line">        10.0.0.11</span><br><span class="line">        10.0.0.22</span><br><span class="line">        10.0.0.33</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">echo &quot;C language for print&quot;</span><br><span class="line">for ((i=0;i&lt;$&#123;#array[*]&#125;;i++))</span><br><span class="line">do</span><br><span class="line">        echo &quot;$&#123;array[$i]&#125;&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;shell for print&quot;</span><br><span class="line">for n in $&#123;array[*]&#125;</span><br><span class="line">do</span><br><span class="line">        echo $n</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>范例1：利用循环打印下面这句话中字母数不大于6的单词</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">I am oldboy teacher welcome to oldboy training class</span></span><br><span class="line">[root@localhost scripts]# cat array.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">arr=(I am oldboy teacher weclome to oldboy traning class)</span><br><span class="line"></span><br><span class="line">for ((i=0;i&lt;$&#123;#arr[*]&#125;;i++))</span><br><span class="line">do</span><br><span class="line">        if [ $&#123;#arr[$i]&#125; -le 6 ];then</span><br><span class="line">                echo &quot;$&#123;arr[$i]&#125;&quot;</span><br><span class="line">        fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo -----------------</span><br><span class="line"></span><br><span class="line">for n in $&#123;arr[*]&#125;</span><br><span class="line">do</span><br><span class="line">        if [ `expr length $n` -le 6 ];then</span><br><span class="line">                echo $n</span><br><span class="line">        fi</span><br><span class="line">done </span><br></pre></td></tr></table></figure><p><strong>范例2：批量检查多个网站地址是否正常</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost scripts]# cat for_url.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">source /etc/init.d/functions</span><br><span class="line">check_count=0</span><br><span class="line">url_list=(</span><br><span class="line">        http://www.baidu.com</span><br><span class="line">        http://www.sougou.com</span><br><span class="line">        http://www.qq.com</span><br><span class="line">        http://192.168.100.10</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">wait()&#123;</span><br><span class="line">        echo -n &quot;3秒后，执行检查URL操作&quot;</span><br><span class="line">        for ((i=0;i&lt;3;i++))</span><br><span class="line">        do</span><br><span class="line">                echo -n &quot;.&quot;;sleep 1</span><br><span class="line">        done</span><br><span class="line">        echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check_url()&#123;</span><br><span class="line">        wait</span><br><span class="line">        for ((i=0;i&lt;$&#123;#url_list[*]&#125;;i++))</span><br><span class="line">        do</span><br><span class="line">                wget -o /dev/null -T 3 --tries=1 --spider $&#123;url_list[$i]&#125; &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">                if [ $? -eq 0 ];then</span><br><span class="line">                        action &quot;$&#123;url_list[$i]&#125;&quot; /bin/true</span><br><span class="line">                else</span><br><span class="line">                        action &quot;$&#123;url_list[$i]&#125;&quot; /bin/false</span><br><span class="line">                fi</span><br><span class="line">        done</span><br><span class="line">        ((check_count++))  #检测次数加1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">        while true</span><br><span class="line">        do</span><br><span class="line">                check_url</span><br><span class="line">                echo &quot;---------check count:$&#123;check_count&#125;------------&quot;</span><br><span class="line">                sleep 10</span><br><span class="line">        done</span><br><span class="line">&#125;</span><br><span class="line">main</span><br></pre></td></tr></table></figure><h2 id="Expect自动化交互程序"><a href="#Expect自动化交互程序" class="headerlink" title="Expect自动化交互程序"></a>Expect自动化交互程序</h2><p>什么是expect</p><p>是一个用来实现自动交互功能的软件套件。在很多情况下，执行系统命令或程序时，系统会以交互的形式要求用户输入指定的字符串，之后才能继续执行命令，而使用expect之后，就可以实现自动与交互式程序通信，无须管理员的手工干预。</p><p>expect的大概工作流程</p><p>spawn启动指定进程-&gt;expect获取期待的关键字-&gt;send向指定进程发送指定字符-&gt;进程执行完毕，退出结束</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ssh远程服务器福在职 无须手动输入密码</span></span><br><span class="line">[root@mysql-zhuzhilong1 ~]# cat test.exp </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line">spawn ssh root@192.168.100.10 uptime</span><br><span class="line"></span><br><span class="line">expect &quot;*password&quot; #利用expect获取执行上述ssh命令输出的字符串是否为匹配的*password</span><br><span class="line"></span><br><span class="line">send &quot;000000\n&quot;</span><br><span class="line"></span><br><span class="line">expect eof #处理完毕后结束expect</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自动输入<span class="built_in">yes</span>和密码</span></span><br><span class="line">  oot@mysql-zhuzhilong1 ~]# vim test2.exp</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line">spawn ssh root@192.168.100.10 uptime</span><br><span class="line"></span><br><span class="line">expect &#123;</span><br><span class="line">        &quot;yes/no&quot;        &#123;exp_send &quot;yes\r&quot;;exp_continue&#125;</span><br><span class="line">        &quot;*password&quot;     &#123;exp_send &quot;000000\r&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line">expect eof</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">exp_send和send类似，\r回车和\n换行类似</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">expect &#123;&#125;类似多行expect</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">匹配多个字符串，需要在每次匹配并执行动作后，加上exp_continue</span></span><br></pre></td></tr></table></figure><p><strong>范例1：利用expect响应shell脚本中的多个read读入</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat 18_3_1.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">read -p &quot;Please input your username:&quot; name</span><br><span class="line">read -p &quot;Please input your password:&quot; pass</span><br><span class="line">read -p &quot;Please input your email:&quot; mail</span><br><span class="line">echo  &quot;your name is $name&quot;</span><br><span class="line">echo  &quot;your password is $pass&quot;</span><br><span class="line">echo &quot;your email is $mail&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# cat 18_3_2.exp </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line">spawn /bin/bash 18_3_1.sh</span><br><span class="line"></span><br><span class="line">expect &#123;</span><br><span class="line">        &quot;username&quot; &#123;exp_send &quot;oldboy\r&quot;;exp_continue&#125;</span><br><span class="line">        &quot;*pass*&quot; &#123;exp_send &quot;000000\r&quot;;exp_continue&#125;</span><br><span class="line">        &quot;*mail*&quot; &#123;exp_send &quot;admin@giaogg.cn\r&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expect eof</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">expect 18_3_2.exp </span><br><span class="line">spawn /bin/bash 18_3_1.sh</span><br><span class="line">Please input your username:oldboy</span><br><span class="line">Please input your password:000000</span><br><span class="line">Please input your email:admin@giaogg.cn</span><br><span class="line">your name is oldboy</span><br><span class="line">your password is 000000</span><br><span class="line">your email is admin@giaogg.cn</span><br></pre></td></tr></table></figure><h3 id="expect常用命令"><a href="#expect常用命令" class="headerlink" title="expect常用命令"></a>expect常用命令</h3><p><img src="/shell.assets/image-20210405115201303.png" alt="image-20210405115201303"></p><h3 id="expect程序变量"><a href="#expect程序变量" class="headerlink" title="expect程序变量"></a>expect程序变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">set 变量名 变量值</span><br><span class="line">puts $变量名</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# vim 18_6_1.exp </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line">set password &quot;000000&quot;</span><br><span class="line">puts $password</span><br><span class="line">send_user &quot;$password\n&quot;</span><br><span class="line">[root@localhost ~]# expect 18_6_1.exp </span><br><span class="line">000000</span><br><span class="line">000000</span><br></pre></td></tr></table></figure><p><strong>特殊参数变量</strong></p><p>$argv表示参数数组，可以使用[lindex $argv n]接收expect脚本传参，n从0开始</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim 18_6_2.exp    </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/use/bin/expect</span></span><br><span class="line"></span><br><span class="line">set file [lindex $argv 0]</span><br><span class="line">set host [lindex $argv 1]</span><br><span class="line">set dir [lindex $$argv 2]</span><br><span class="line">send_user &quot;$file\t$host\t$dir\n&quot;</span><br><span class="line">puts &quot;$file\t$host\t$dir\n&quot;</span><br><span class="line"></span><br><span class="line">root@localhost ~]# expect 18_6_2.exp oldboy.log 192.168.100.200 /tmp</span><br><span class="line">oldboy.log      192.168.100.200 /tmp</span><br><span class="line">oldboy.log      192.168.100.200 /tmp</span><br></pre></td></tr></table></figure><p>expect接收参数的方式和bash脚本的方式有些区别，bash是通过$0..$n这种方式来接收的，而expect是通过set&lt;变量名&gt; [lindex $argv <param index>]来接收的。还有其他特殊的参数，例如：$argc表示传参的个数，$argv0表示脚本的名字。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim 18_6_2.exp    </span><br><span class="line">send_user &quot;$file\t$host\t$dir\n&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/use/bin/expect</span></span><br><span class="line"></span><br><span class="line">set file [lindex $argv 0]</span><br><span class="line">set host [lindex $argv 1]</span><br><span class="line">set dir [lindex $$argv 2]</span><br><span class="line"></span><br><span class="line">puts &quot;$file\t$host\t$dir&quot;</span><br><span class="line">puts $argc</span><br><span class="line">puts $argv0</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# expect 18_6_2.exp oldboy.log 192.168.100.200 /tmp</span><br><span class="line">oldboy.log      192.168.100.200 /tmp</span><br><span class="line">3</span><br><span class="line">18_6_2.exp</span><br></pre></td></tr></table></figure><p><strong>if条件语句：if关键字后面要有空格，else关键字前后都要有空格</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用<span class="keyword">if</span>语句判断脚本传参的个数</span></span><br><span class="line">[root@localhost ~]# vim 18_9_1.exp    </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line">if &#123; $argc != 3 &#125; &#123;</span><br><span class="line">        send_user &quot;Usage:expect $argv0 file host dir\n&quot;</span><br><span class="line">        exit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set file [lindex $argv 0]</span><br><span class="line">set host [lindex $argv 1]</span><br><span class="line">set dir [lindex $argv 2]</span><br><span class="line">puts &quot;$file\t$host\t$dir&quot;</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# expect 18_9_1.exp </span><br><span class="line">Usage:expect 18_9_1.exp file host dir</span><br><span class="line">[root@localhost ~]# expect 18_9_1.exp oldboy.log 192.168.100.10 /home/boldboy</span><br><span class="line">oldboy.log      192.168.100.10  /home/boldboy</span><br></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p><strong>timeout关键字</strong></p><p>是一个控制时间的关键字变量，它是一个全局性的时间控制开关，可以通过为这个变量赋值来规定整个expect操作的时间</p><p><strong>范例1：timeout超时功能</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim 18_11_1.exp </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line">spawn ssh root@192.168.100.10 uptime</span><br><span class="line"></span><br><span class="line">set timeout 5</span><br><span class="line"></span><br><span class="line">expect &quot;yes/no&quot; &#123;exp_send &quot;yes\r&quot;; exp_continue&#125;</span><br><span class="line"></span><br><span class="line">expect timeout &#123;puts &quot;Request timeout by oldboy.&quot;; return&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当到达30秒后就超时，打印指定输出后退出</span></span><br><span class="line">[root@localhost ~]# expect 18_11_1.exp </span><br><span class="line">spawn ssh root@192.168.100.10 uptime</span><br><span class="line">root@192.168.100.10&#x27;s password: </span><br><span class="line">Request timeout by oldboyRequest timeout by oldboy.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# vim 18_11_2.exp                 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line">spawn ssh root@192.168.100.10 uptime</span><br><span class="line">expect &#123;</span><br><span class="line">        -timeout 3</span><br><span class="line">        &quot;yes/no&quot; &#123;exp_send &quot;yes\r&quot;; exp_continue&#125;</span><br><span class="line">        timeout &#123;puts &quot;Request timeout by oldboy&quot;; return&#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@localhost ~]# expect 18_11_2.exp </span><br><span class="line">spawn ssh root@192.168.100.10 uptime</span><br><span class="line">root@192.168.100.10&#x27;s password: Request timeout by oldboy</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">timeout</span>变量设置为0，表示立即超时，为-1则表示永不超时</span></span><br></pre></td></tr></table></figure><p><strong>范例2：开发expect脚本实现自动化交互式批量执行命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">  oot@localhost ~]# vim 18_12_1.exp</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line">if &#123;$argc != 2 &#125; &#123;</span><br><span class="line">        puts &quot;usage:expect $argv0 ip command&quot;</span><br><span class="line">        exit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set ip [lindex $argv 0]</span><br><span class="line">set cmd [lindex $argv 1]</span><br><span class="line">set password &quot;000000&quot;</span><br><span class="line"></span><br><span class="line">spawn ssh root@$ip $cmd</span><br><span class="line">expect &#123;</span><br><span class="line">        &quot;yes/no&quot; &#123;exp_send &quot;yes\r&quot;; exp_continue&#125;</span><br><span class="line">        &quot;*password&quot; &#123;exp_send &quot;$password\r&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expect eof</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# expect 18_12_1.exp 192.168.100.10 uptime</span><br><span class="line">spawn ssh root@192.168.100.10 uptime</span><br><span class="line">root@192.168.100.10&#x27;s password: </span><br><span class="line"> 13:02:29 up  3:47,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class="line">[root@localhost ~]# expect 18_12_1.exp 192.168.100.10 &quot;free -m&quot;</span><br><span class="line">spawn ssh root@192.168.100.10 free -m</span><br><span class="line">root@192.168.100.10&#x27;s password: </span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1821         477         768          10         575        1116</span><br><span class="line">Swap:          2047           0        2047</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2）利用shell循环执行expect脚本命令</span></span><br><span class="line">  oot@localhost ~]# vim 18_12_2.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ $# -ne 1 ];then</span><br><span class="line">        echo &quot;usage:$0 cmd&quot;</span><br><span class="line">        exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cmd=$1</span><br><span class="line">for n in 10 201</span><br><span class="line">do</span><br><span class="line">        expect 18_12_1.exp 192.168.100.$n &quot;$cmd&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">  oot@localhost ~]# vim 18_12_1.exp</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line">if &#123;$argc != 2 &#125; &#123;</span><br><span class="line">        puts &quot;usage:expect $argv0 ip command&quot;</span><br><span class="line">        exit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set ip [lindex $argv 0]</span><br><span class="line">set cmd [lindex $argv 1]</span><br><span class="line">set password &quot;000000&quot;</span><br><span class="line"></span><br><span class="line">spawn ssh root@$ip $cmd</span><br><span class="line">expect &#123;</span><br><span class="line">        &quot;yes/no&quot; &#123;exp_send &quot;yes\r&quot;; exp_continue&#125;</span><br><span class="line">        &quot;*password&quot; &#123;exp_send &quot;$password\r&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expect eof</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# sh 18_12_2.sh &quot;free -m&quot;</span><br><span class="line">spawn ssh root@192.168.100.10 free -m</span><br><span class="line">root@192.168.100.10&#x27;s password: </span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1821         477         768          10         574        1116</span><br><span class="line">Swap:          2047           0        2047</span><br><span class="line">spawn ssh root@192.168.100.201 free -m</span><br><span class="line">root@192.168.100.201&#x27;s password: </span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:            974         180         442           7         351         607</span><br><span class="line">Swap:          2047           0        2047</span><br></pre></td></tr></table></figure><p><strong>范例3：批量发送文件或目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim 18_13_1.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ $# -ne 2 ];then</span><br><span class="line">        echo &quot;USAGE:$0 file dir&quot;</span><br><span class="line">        exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">file=$1</span><br><span class="line">dir=$2</span><br><span class="line"></span><br><span class="line">for n in 10 201</span><br><span class="line">do</span><br><span class="line">        expect 18_13_1.exp $file 192.168.100.$n $dir</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# cat 18_13_1.exp </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line">if &#123; $argc != 3 &#125; &#123;</span><br><span class="line">        puts &quot;usage:expect $argv0 file host dir&quot;</span><br><span class="line">        exit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set file [lindex $argv 0]</span><br><span class="line">set host [lindex $argv 1]</span><br><span class="line">set dir [lindex $argv 2]</span><br><span class="line">set password &quot;000000&quot;</span><br><span class="line">spawn scp -P22 -rp $file root@$host:$dir</span><br><span class="line"></span><br><span class="line">expect &#123;</span><br><span class="line">        &quot;yes/no&quot; &#123;exp_send &quot;yes\r&quot;; exp_continue&#125;</span><br><span class="line">        &quot;*password&quot; &#123;exp_send &quot;$password\r&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line">expect eof</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# sh 18_13_1.sh /etc/hosts /opt</span><br><span class="line">spawn scp -P22 -rp /etc/hosts root@192.168.100.10:/opt</span><br><span class="line">root@192.168.100.10&#x27;s password: </span><br><span class="line">hosts                                                                          100%  226   121.3KB/s   00:00    </span><br><span class="line">spawn scp -P22 -rp /etc/hosts root@192.168.100.201:/opt</span><br><span class="line">root@192.168.100.201&#x27;s password: </span><br><span class="line">hosts                                                                          100%  226   245.7KB/s   00:00 </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
