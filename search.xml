<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ansible的安装与使用</title>
      <link href="/posts/7671.html"/>
      <url>/posts/7671.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、Ansible的安装与使用"><a href="#一、Ansible的安装与使用" class="headerlink" title="一、Ansible的安装与使用"></a>一、Ansible的安装与使用</h1><p>这里关于Ansible的介绍不过多说明，就是一个集群自动化管理的工具，目前市面上比较常用到的工具除了Ansible还有Saltstack和puppent，下面做一个简单对比说明，各有优点，具体根据自己的实际需求去选择工具。</p><ul><li>Ansible：基于python开发，使用SSH协议通信，适用于中小型集群管理。</li><li>Saltstack：基于python开发，基于agent通信，所以要在被执行机器部署agent，执行效率高。</li><li>Puppent：基于ruby开发，功能强大，配置复杂，适用于大型集群管理。</li></ul><p>如果你管理的集群不是很多，且用起来比较简单，不需要繁琐的配置，那么就是shell和Ansible二选其一，这里更推荐使用Ansible，原因：Ansible的幂等性太香，幂等性简单说就是一个任务执行一次和执行N次效果是一样的，不会因为重复执行出现意外情况。</p><p>下面直接开始安装用起来吧。</p><h2 id="1-1-安装最新版的Ansible"><a href="#1-1-安装最新版的Ansible" class="headerlink" title="1.1 安装最新版的Ansible"></a>1.1 安装最新版的Ansible</h2><p>因为基于SSH协议通信（默认），所以只要在集群的任意一个节点上（即控制节点）安装Ansible即可。</p><p>详见官方doc：[安装手册][<a href="https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html]">https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html]</a></p><p>目前最新版本是Ansible 2.9版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> &gt;&gt;/etc/yum.repos.d/epel.repo&lt;&lt;<span class="string">&#x27;EOF&#x27;</span></span></span><br><span class="line">[epel]</span><br><span class="line">name=epel repo</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/7/$basearch</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>rpm包安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum install ansible</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装简单快捷</span></span><br></pre></td></tr></table></figure><p>pip3安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先节点环境已安装python3+pip3环境（这里具体怎么安装python环境就不展示了，网上有很多教程）</span></span><br><span class="line">python3 -m pip install --user ansible</span><br></pre></td></tr></table></figure><p>确认安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible --version</span><br></pre></td></tr></table></figure><p>注意事项：yum安装ansible会自动提供配置文件。而pip安装的ansible默认不提供配置文件。</p><h2 id="1-2-简单用一下看看"><a href="#1-2-简单用一下看看" class="headerlink" title="1.2 简单用一下看看"></a>1.2 简单用一下看看</h2><p>本次测试环境总共是三个节点：一个Ansible控制节点，两个被控制节点。</p><table><thead><tr><th align="center">主机名</th><th align="center">IP地址</th><th align="center">Ansible版本</th></tr></thead><tbody><tr><td align="center">ansible</td><td align="center">192.168.32.104</td><td align="center">core 2.11.12</td></tr><tr><td align="center">node-1</td><td align="center">192.168.32.105</td><td align="center"></td></tr><tr><td align="center">node-2</td><td align="center">192.168.32.106</td><td align="center"></td></tr></tbody></table><p><strong>演示被控制主机是否存活</strong></p><p>要使用ansbile中的ping模块，这里的ping不是windows中的ping命令，只是同名而已，如果被控主机存活则回复pong。</p><p><img src="https://cdn.jsdelivr.net/gh/shitdevops/AssetsRepo@main/images/wps1.jpg" alt="img"></p><p>警报信息：主机清单列表是空的，只有本机可用</p><p>本机可用那就用本机测试一下看看</p><p><img src="https://cdn.jsdelivr.net/gh/shitdevops/AssetsRepo@main/images/wps2.jpg" alt="img"></p><p>还是有警报信息：忽略本机</p><p>所以要去配置主机清单文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ~]# vim /etc/ansible/hosts</span><br><span class="line">光标跳到最下面添加要加入主机清单的主机</span><br><span class="line">192.168.32.105</span><br><span class="line">192.168.32.106</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/shitdevops/AssetsRepo@main/images/wps3.jpg" alt="img"></p><p>看到这个就可以确定连接插件走的是SSH协议</p><p><img src="https://cdn.jsdelivr.net/gh/shitdevops/AssetsRepo@main/images/wps4.jpg" alt="img"></p><p>报错：不可到达目标主机，因为没有基于Key的验证，所以不能随便连接其他主机</p><p>如果不做基于Key的验证就要在命令后面加上-k（输入对应的用户名指令）</p><p><img src="https://cdn.jsdelivr.net/gh/shitdevops/AssetsRepo@main/images/wps5.jpg" alt="img"></p><p>这里的口令是被控端主机的口令</p><p><img src="https://cdn.jsdelivr.net/gh/shitdevops/AssetsRepo@main/images/wps6.jpg" alt="img"></p><p>输入正确口令后，被控主机存活就会回复一个pong</p><p>默认情况下ssh登录比较慢，如果有需要可以修改ssh配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ~]# vim /etc/ssh/sshd_config</span><br><span class="line">将UseDNS yes</span><br><span class="line">改成no</span><br><span class="line">GSSAPIAuthentication yes</span><br><span class="line">也改成no</span><br></pre></td></tr></table></figure><p>这里是给一个主机测试存活，如果是多个主机那么该输入谁的口令（口令不一样）？</p><p><img src="https://cdn.jsdelivr.net/gh/shitdevops/AssetsRepo@main/images/wps7.jpg" alt="img"></p><p>在这里输入的是node-1主机的口令，所以只能测试node-1主机不能去测试node-2主机</p><p>而且发送的顺序也不一样，命令中是105在前106在后，而回复信息中是先发送的106最后是105。所以输口令这种方式只能适合所有主机一样的口令，那么主机口令不一样就要基于Key的验证来实现。</p><p>接着上面的继续做，如果把node-2主机的口令修改成和node-1的口令一样，那么会成功吗？</p><p><img src="https://cdn.jsdelivr.net/gh/shitdevops/AssetsRepo@main/images/wps8.jpg" alt="img"></p><p>可以看到node-2还是错的，口令明明都一样了为什么还是错的呢？</p><p>这是因为known_hosts文件只记住了第一次成功的主机口令</p><p><img src="https://cdn.jsdelivr.net/gh/shitdevops/AssetsRepo@main/images/wps9.jpg" alt="img"></p><p>可以看到这里没有node-2的口令</p><p>那用ssh直接连接node-2呢？会不会成功？</p><p><img src="https://cdn.jsdelivr.net/gh/shitdevops/AssetsRepo@main/images/wps10.jpg" alt="img"></p><p>可以连，然后在用ping模块试一下呢？</p><p><img src="https://cdn.jsdelivr.net/gh/shitdevops/AssetsRepo@main/images/wps11.jpg" alt="img"></p><p>这回成功了。为什么呢？<br>因为上次失败了就记住了这台主机是不可信的，所以在此用ansbile连接的时候还是报错不会再让你连接。所以只能手工ssh协议连接node-2让known_hosts文件记住node-2的正确口令</p><p>所以最好的解决办法就是做基于key的验证，到后面在做这一步。</p><p>如果想把所有的主机都控制，可以把主机IP地址改成all，all代表主机清单中的所有主机</p><p><img src="https://cdn.jsdelivr.net/gh/shitdevops/AssetsRepo@main/images/wps12.jpg" alt="img"></p><h2 id="1-3-Ansible配置文件"><a href="#1-3-Ansible配置文件" class="headerlink" title="1.3 Ansible配置文件"></a>1.3 Ansible配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置文件：</span></span><br><span class="line">/etc/ansible/ansible.cfg 主配置文件，配置ansbile工作特性</span><br><span class="line">/etc/ansbile/hosts 主机清单</span><br><span class="line">/etc/ansbile/roles 存放角色的目录</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">程序文件：</span></span><br><span class="line">/usr/bin/ansbile 主程序，临时命令执行工具</span><br><span class="line">/usr/bin/ansbile-doc 查看配置文档，模块功能查看工具</span><br><span class="line">/usr/bin/ansbile-galaxy 下载/上传代码或role模块的官网平台</span><br><span class="line">/usr/bin/ansbile-playbook 定制自动化任务，编排剧本工具/usr/bin/ansbile-pull远程执行命令的工具</span><br><span class="line">/usr/bin/ansbile-vault 文件加密工具</span><br><span class="line">/usr/bin/ansbile-console 基于Console界面与用户交互的执行工具</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主机清单inventory</span></span><br><span class="line">ansbile的主要功能用在于批量主机操作，为了便携地使用其中的部分主机，可以在inventory file中将其分组命名。</span><br><span class="line">默认的inventory file为/etc/ansbile/hosts</span><br><span class="line">Inventory file也可以有多个，且也可以通过dynamic inventory来动态生成</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ansible </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test2</title>
      <link href="/posts/51705.html"/>
      <url>/posts/51705.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>给博客添加B站同款动态banner</title>
      <link href="/posts/37637.html"/>
      <url>/posts/37637.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
